x-postgres-test-db-credentials: &postgres-test-db-credentials
  POSTGRES_DB: mydb
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  POSTGRES_HOST: postgres_test_db
  POSTGRES_PORT: 5432

services:
  api:
    extends:
      file: docker-compose.yml
      service: api
    entrypoint: ["/code/entrypoint-dev.sh"]
    depends_on:
      ensure_populate_test_db:
        condition: service_completed_successfully
      metabase:
        condition: service_healthy

  web:
    extends:
      file: docker-compose.yml
      service: web
  
  redis:
    extends:
      file: docker-compose.yml
      service: redis

  postgres:
    extends:
      file: docker-compose.yml
      service: postgres

  minio:
    extends:
      file: docker-compose.yml
      service: minio

  createbuckets:
    extends:
      file: docker-compose.yml
      service: createbuckets

  hatchet-lite:
    extends:
      file: docker-compose.yml
      service: hatchet-lite

  setup-hatchet:
    extends:
      file: docker-compose.yml
      service: setup-hatchet

  worker:
    extends:
      file: docker-compose.yml
      service: worker

  ## Test resources
  postgres_test_db:
    image: postgres:15.6
    command: postgres -c 'max_connections=200'
    environment:
      <<: [*postgres-test-db-credentials]
    ports:
      - "6543:5432"
    volumes:
      - postgres_test_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h $${POSTGRES_HOST} -p $${POSTGRES_PORT}",
        ]
      interval: 2s
      timeout: 5s
      retries: 10

  populate_postgres_test_db:
    build:
      context: backend/fixtures/test_resources/jaffle_shop
      dockerfile: Dockerfile
    environment:
      <<: [*postgres-test-db-credentials]
    depends_on:
      postgres_test_db:
        condition: service_healthy
    restart: no

  ensure_populate_test_db:
    image: busybox:latest
    depends_on:
      populate_postgres_test_db:
        condition: service_completed_successfully
    restart: no

  metabase:
    image: metabase/metabase:latest
    volumes:
      - /dev/urandom:/dev/random:ro
      - ./backend/fixtures/test_resources/metabase:/metabase-data
    ports:
      - 4000:4000
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
      MB_JETTY_PORT: 4000 # prevents port conflict with other services
    healthcheck:
      test: curl --fail -I http://localhost:4000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
  ready:
    extends:
      file: docker-compose.yml
      service: ready

volumes:
  postgres_data:
  minio_data:
  hatchet_lite_rabbitmq_data:
  hatchet_lite_config:
  hatchet_credentials_handoff:
  postgres_test_db_data:
  frontend_data:

networks:
  default:
    name: app_network_demo
    driver: bridge
