x-storage-credentials: &storage-credentials
  AWS_S3_ACCESS_KEY_ID: &s3-id ${AWS_S3_ACCESS_KEY_ID:-minio_admin}
  AWS_S3_SECRET_ACCESS_KEY: &s3-key ${AWS_S3_SECRET_ACCESS_KEY:-minio_password}
  AWS_STORAGE_BUCKET_NAME: &s3-bucket ${AWS_STORAGE_BUCKET_NAME:-artifacts}
  AWS_S3_ENDPOINT_URL: &s3-url ${AWS_S3_ENDPOINT_URL:-http://minio:9000}
  JUICEFS_BUCKET_NAME: ${JUICEFS_BUCKET_NAME:-juicefs2}

  # minio replicas
  MINIO_ROOT_USER: *s3-id
  MINIO_ROOT_PASSWORD: *s3-key
  MINIO_BUCKET_NAME: *s3-bucket
  MINIO_ENDPOINT: *s3-url
  MINIO_BROWSER_REDIRECT_URL: http://localhost:9001

services:
  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  minio:
    image: minio/minio
    command: server --address 0.0.0.0:9000 /data --console-address ":9001"
    environment:
      <<: *storage-credentials
    ports:
      - "9001:9001"
      - "127.0.0.1:9000:9000" # Expose port 9000
    volumes:
      - minio_data:/data


  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started
    environment:
      <<: *storage-credentials
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio $${MINIO_ENDPOINT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing myminio/public-assets;
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_BUCKET_NAME};
      /usr/bin/mc mb --ignore-existing myminio/$${JUICEFS_BUCKET_NAME};
      /usr/bin/mc anonymous set public myminio/public-assets;
      exit 0;
      "
    restart: no


  # start-juicefs:
  #   image: juicedata/mount:ce-v1.1.2
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     createbuckets:
  #       condition: service_completed_successfully
  #   entrypoint: >
  #     juicefs format --storage s3 --bucket http://minio:9000/juicefs2
  #     --access-key minio_admin --secret-key minio_password
  #     redis://redis:6379/1 myjfs
  #   restart: no

  # juicefs:
  #   image: juicedata/mount:ce-v1.1.2
  #   container_name: myjfs
  #   volumes:
  #     - ./mnt:/mnt:rw,rshared
  #   cap_add:
  #     - SYS_ADMIN
  #   devices:
  #     - /dev/fuse
  #   security_opt: 
  #     - apparmor:unconfined
  #   command: ["juicefs", "mount", "redis://redis:6379/1", "/mnt"]
  #   depends_on:
  #     start-juicefs:
  #       condition: service_completed_successfully
  #   restart: unless-stopped

  juicefs:
    image: busybox
    command: while true; do ls /root/jfs; sleep 100; done
  #   image: juicedata/mount:ce-v1.1.2 
  #   command: > 
  #     /bin/sh -c "
  #     juicefs format --storage s3 --bucket http://minio:9000/juicefs2 --access-key minio_admin --secret-key minio_password redis://redis:6379/1 myjfs;
  #     juicefs mount redis://redis:6379/1 myjfs ~/jfs
  #     "
  #   cap_add:
  #     - SYS_ADMIN
  #   devices:
  #     - /dev/fuse
  #   security_opt: 
  #     - apparmor:unconfined
  #   volumes:
  #     - ./jfs:/root/jfs:rw,rshared
  #   depends_on:
  #     createbuckets:
  #       condition: service_completed_successfully

volumes:
  minio_data:
  jfsvolume:
    driver: juicedata/juicefs
    driver_opts:
      name: jfsvolume
      # SQLite creates the database file in the plugin container's local path,
      # and sqlite:// will fail when the service is restarted.
      # (See https://github.com/juicedata/docker-volume-juicefs/issues/37 for details)
      metaurl: redis://redis:6379/1
