x-storage-credentials: &storage-credentials
  MINIO_TEST_BUCKET_NAME: "test-bucket"

x-dev-credentials: &dev-credentials
  GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
  SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
  SNOWFLAKE_USER: ${SNOWFLAKE_USER}
  SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
  GITHUB_APP_ID: 312164
  GITHUB_PRIVATE_KEY_BASE64: ${GITHUB_PRIVATE_KEY_BASE64}
  GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
  DEV: "true"

x-telemetry-credentials: &telemetry-credentials
  NEXT_PUBLIC_POSTHOG_KEY: ""
  NEXT_PUBLIC_POSTHOG_HOST: ""

x-postgres-test-db-credentials: &postgres-test-db-credentials
  POSTGRES_DB: mydb
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  POSTGRES_HOST: postgres_test_db
  POSTGRES_PORT: 5432

name: turntable-dev

services:
  api:
    extends:
      file: docker-compose.demo.yml
      service: api
    build:
      args:
        - ENV=dev
    command: ["django-admin", "start_server", "--mode", "dev"]
    environment:
      <<: [*dev-credentials, *storage-credentials]
    volumes:
      - ./backend:/code
    stdin_open: true
    tty: true

  web:
    extends:
      file: docker-compose.demo.yml
      service: web
    build:
      args:
        - ENV=dev
    restart: always
    command: ["pnpm", "dev"]
    environment:
      <<: *telemetry-credentials
      DEV: "true"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  redis:
    extends:
      file: docker-compose.demo.yml
      service: redis

  postgres:
    extends:
      file: docker-compose.demo.yml
      service: postgres

  minio:
    extends:
      file: docker-compose.demo.yml
      service: minio


  createbuckets:
    extends:
      file: docker-compose.demo.yml
      service: createbuckets
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio $${MINIO_ENDPOINT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing myminio/public-assets;
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_BUCKET_NAME};
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_TEST_BUCKET_NAME};
      /usr/bin/mc anonymous set public myminio/public-assets;
      exit 0;
      "
    environment:
      <<: *storage-credentials

  worker:
    build:
      args:
        - ENV=dev
    extends:
      file: docker-compose.demo.yml
      service: worker
    command: ["django-admin", "start_worker", "--mode", "dev"]
    environment:
      <<: [*dev-credentials, *storage-credentials]
    volumes:
      - ./backend:/code
    stdin_open: true
    tty: true

  scheduler:
    build:
      args:
        - ENV=dev
    extends:
      file: docker-compose.demo.yml
      service: worker
    command: ["django-admin", "start_beat", "--mode", "dev"]
    environment:
      <<: [*dev-credentials, *storage-credentials]

  flower:
    build:
      args:
        - ENV=dev
    extends:
      file: docker-compose.demo.yml
      service: flower

  ## Test resources
  postgres_test_db:
    extends:
      file: docker-compose.demo.yml
      service: postgres_test_db

  populate_postgres_test_db:
    extends:
      file: docker-compose.demo.yml
      service: populate_postgres_test_db

  ensure_populate_test_db:
    extends:
      file: docker-compose.demo.yml
      service: ensure_populate_test_db

  metabase:
    extends:
      file: docker-compose.demo.yml
      service: metabase

  ready:
    extends:
      file: docker-compose.demo.yml
      service: ready

volumes:
  postgres_data:
  minio_data:
  postgres_test_db_data:
  frontend_data:
  code_repos:

networks:
  default:
    name: app_network_dev
    driver: bridge
