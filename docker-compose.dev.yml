
x-dev-credentials: &dev-credentials
  GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
  SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}
  SNOWFLAKE_USER: ${SNOWFLAKE_USER}
  SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
  GITHUB_APP_ID: 312164
  GITHUB_PRIVATE_KEY_BASE64: ${GITHUB_PRIVATE_KEY_BASE64}
  GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
  DEV: "true"

x-postgres-test-db-credentials: &postgres-test-db-credentials
  POSTGRES_DB: mydb
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  POSTGRES_HOST: postgres_test_db
  POSTGRES_PORT: 5432

services:
  api:
    extends:
      file: docker-compose.yml
      service: api
    build:
      args:
        - ENV=dev
    command:
        [
          "uvicorn",
          "api.asgi:application",
          "--host",
          "0.0.0.0",
          "--port",
          "8000",
          "--reload",
        ]
    environment:
      <<: *dev-credentials
    volumes:
      - ./backend:/code
    stdin_open: true
    tty: true 

  web:
    extends:
      file: docker-compose.yml
      service: web
    environment:
      DEV: "true"
    volumes:
      - ./frontend:/code

  postgres:
    extends:
      file: docker-compose.yml
      service: postgres

  minio:
    extends:
      file: docker-compose.yml
      service: minio

  createbuckets:
    extends:
      file: docker-compose.yml
      service: createbuckets

  hatchet-lite:
    extends:
      file: docker-compose.yml
      service: hatchet-lite

  setup-hatchet:
    extends:
      file: docker-compose.yml
      service: setup-hatchet

  run-worker:
    extends:
      file: docker-compose.yml
      service: run-worker
    build:
      args:
        - ENV=dev
    environment:  
      <<: *dev-credentials
    volumes:
      - ./backend:/code
    stdin_open: true
    tty: true

  ## Test resources
  postgres_test_db:
    image: postgres:15.6
    command: postgres -c 'max_connections=200'
    environment:
      <<: [*postgres-test-db-credentials]
    ports:
      - "6543:5432"
    volumes:
      - postgres_test_db_data:/var/lib/postgresql/data

  populate_postgres_test_db:
    build:
      context: backend/fixtures/test_resources/jaffle_shop
      dockerfile: Dockerfile
    environment:
      <<: [*postgres-test-db-credentials]
    depends_on:
      - postgres_test_db
    restart: no

  ensure_populate_test_db:
    image: busybox:latest
    depends_on:
      populate_postgres_test_db:
        condition: service_completed_successfully
    restart: no

  metabase:
    image: metabase/metabase:latest
    volumes:
      - /dev/urandom:/dev/random:ro
      - ./backend/fixtures/test_resources/metabase:/metabase-data
    ports:
      - 4000:4000
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
      MB_JETTY_PORT: 4000 # prevents port conflict with other services
    healthcheck:
      test: curl --fail -I http://localhost:4000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  minio_data:
  hatchet_lite_rabbitmq_data:
  hatchet_lite_config:
  hatchet_credentials_handoff:
  postgres_test_db_data:
  frontend_data:

networks:
  default:
    name: app_network
    driver: bridge

  