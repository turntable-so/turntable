# Define env variables
x-postgres-credentials: &postgres-credentials
  POSTGRES_DB: ${POSTGRES_DB:-mydb}
  POSTGRES_USER: ${POSTGRES_USER:-myuser}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
  POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}

x-storage-credentials: &storage-credentials
  AWS_S3_ACCESS_KEY_ID: &s3-id ${AWS_S3_ACCESS_KEY_ID:-minio_admin}
  AWS_S3_SECRET_ACCESS_KEY: &s3-key ${AWS_S3_SECRET_ACCESS_KEY:-minio_password}
  AWS_STORAGE_BUCKET_NAME: &s3-bucket ${AWS_STORAGE_BUCKET_NAME:-artifacts}
  AWS_S3_ENDPOINT_URL: &s3-url ${AWS_S3_ENDPOINT_URL:-http://minio:9000}

  # minio replicas
  MINIO_ROOT_USER: *s3-id
  MINIO_ROOT_PASSWORD: *s3-key
  MINIO_BUCKET_NAME: *s3-bucket
  MINIO_ENDPOINT: *s3-url
  MINIO_BROWSER_REDIRECT_URL: http://localhost:9001

x-ai-credentials: &ai-credentials
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

x-dev-credentials: &dev-credentials
  DEV: "false"
  DJANGO_SETTINGS_MODULE: api.settings
  LOCAL_DB: "true"
  LOCAL_HOST: "true"
  LOCAL_REDIS: "true"
  LOCAL_S3: "true"
  CLI_MODE: "false"
  ENCRYPTION_KEY: ${ENCRYPTION_KEY}
  SUPERUSER_EMAIL: ${SUPERUSER_EMAIL}
  SUPERUSER_PASSWORD: ${SUPERUSER_PASSWORD}

x-redis-credentials: &redis-credentials
  REDIS_HOST: "redis"

x-next-credentials: &next-credentials
  LOCAL_HOST: ${LOCAL_HOST:-true}
  NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
  NEXTAUTH_URL_INTERNAL: "http://web:3000"
  NEXTAUTH_URL: "http://localhost:3000"

x-telemetry-credentials: &telemetry-credentials
  NEXT_PUBLIC_POSTHOG_KEY: "phc_XL4KyheAjc4gJV4Fzpg1lbn7goFP1QNqsnNUhY1O1CU"
  NEXT_PUBLIC_POSTHOG_HOST: "https://us.i.posthog.com"

x-common-backend: &common-backend
  build:
    context: backend
    dockerfile: Dockerfile
    args:
      - ENV=prod
  environment:
    <<:
      [
        *postgres-credentials,
        *storage-credentials,
        *ai-credentials,
        *redis-credentials,
        *dev-credentials,
      ]
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

name: turntable

# Define services
services:
  api:
    <<: *common-backend
    ports:
      - "8000:8000"
    command: ["django-admin", "start_server"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  web:
    build:
      context: frontend
      dockerfile: Dockerfile
    command: ["pnpm", "start"]
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
      worker:
        condition: service_healthy
    environment:
      <<: [*next-credentials, *telemetry-credentials]

  postgres:
    image: pgvector/pgvector:pg16
    environment:
      <<: *postgres-credentials
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h $${POSTGRES_HOST} -p $${POSTGRES_PORT}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  minio:
    image: minio/minio
    command: server --address 0.0.0.0:9000 /data --console-address ":9001"
    environment:
      <<: *storage-credentials
    ports:
      - "9001:9001"
      - "127.0.0.1:9000:9000" # Expose port 9000
    volumes:
      - minio_data:/data

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      <<: *storage-credentials
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio $${MINIO_ENDPOINT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing myminio/public-assets;
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_BUCKET_NAME};
      /usr/bin/mc anonymous set public myminio/public-assets;
      exit 0;
      "
    restart: no

  worker:
    <<: *common-backend
    command: ["django-admin", "start_worker"]
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "api", "status"]
      interval: 10s
      timeout: 10s
      retries: 3

  scheduler:
    <<: *common-backend
    command: ["django-admin", "start_beat"]
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy

  flower:
    <<: *common-backend
    command: ["django-admin", "flower"]
    depends_on:
      worker:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5555:5555"

  ready:
    image: busybox:latest
    command: sh -c "echo 'The app is ready! Visit http://localhost:3000/ to get started'"
    restart: no
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_started
      worker:
        condition: service_healthy
      scheduler:
        condition: service_healthy

volumes:
  postgres_data:
  minio_data:
  postgres_test_db_data:
  frontend_data:
  code_repos:

networks:
  default:
    name: app_network
    driver: bridge
