x-internal-credentials: &internal-credentials
  STAGING_ADMIN_EMAIL: ${STAGING_ADMIN_EMAIL}
  STAGING_ADMIN_PASSWORD: ${STAGING_ADMIN_PASSWORD}

  DATABRICKS_0_WORKSPACE_ID: ${DATABRICKS_0_WORKSPACE_ID}
  DATABRICKS_0_WORKSPACE_NAME: ${DATABRICKS_0_WORKSPACE_NAME}
  DATABRICKS_0_RESOURCE_NAME: ${DATABRICKS_0_RESOURCE_NAME}
  DATABRICKS_0_HOST: ${DATABRICKS_0_HOST}
  DATABRICKS_0_TOKEN: ${DATABRICKS_0_TOKEN}
  DATABRICKS_0_HTTP_PATH: ${DATABRICKS_0_HTTP_PATH}

  BIGQUERY_1_WORKSPACE_ID: ${BIGQUERY_1_WORKSPACE_ID}
  BIGQUERY_1_WORKSPACE_NAME: ${BIGQUERY_1_WORKSPACE_NAME}
  BIGQUERY_1_RESOURCE_NAME: ${BIGQUERY_1_RESOURCE_NAME}
  BIGQUERY_1_GOOGLE_APPLICATION_CREDENTIALS: ${BIGQUERY_1_GOOGLE_APPLICATION_CREDENTIALS}
  
  BIGQUERY_2_WORKSPACE_ID: ${BIGQUERY_2_WORKSPACE_ID}
  BIGQUERY_2_WORKSPACE_NAME: ${BIGQUERY_2_WORKSPACE_NAME}
  BIGQUERY_2_RESOURCE_NAME: ${BIGQUERY_2_RESOURCE_NAME}
  BIGQUERY_2_USER_INFO: ${BIGQUERY_2_USER_INFO}
  BIGQUERY_2_GOOGLE_APPLICATION_CREDENTIALS: ${BIGQUERY_2_GOOGLE_APPLICATION_CREDENTIALS}
  BIGQUERY_2_SCHEMA_INCLUDE: ${BIGQUERY_2_SCHEMA_INCLUDE}

  SNOWFLAKE_1_WORKSPACE_ID: ${SNOWFLAKE_1_WORKSPACE_ID}
  SNOWFLAKE_1_WORKSPACE_NAME: ${SNOWFLAKE_1_WORKSPACE_NAME}
  SNOWFLAKE_1_RESOURCE_NAME: ${SNOWFLAKE_1_RESOURCE_NAME}
  SNOWFLAKE_1_ACCOUNT: ${SNOWFLAKE_1_ACCOUNT}
  SNOWFLAKE_1_USER: ${SNOWFLAKE_1_USER}
  SNOWFLAKE_1_PASSWORD: ${SNOWFLAKE_1_PASSWORD}
  SNOWFLAKE_1_WAREHOUSE: ${SNOWFLAKE_1_WAREHOUSE}
  SNOWFLAKE_1_ROLE: ${SNOWFLAKE_1_ROLE}

  LOOKER_1_RESOURCE_NAME: ${LOOKER_1_RESOURCE_NAME}
  LOOKER_1_GITHUB_INSTALLATION_ID: ${LOOKER_1_GITHUB_INSTALLATION_ID}
  LOOKER_1_GITHUB_REPO_ID: ${LOOKER_1_GITHUB_REPO_ID}
  LOOKER_1_URL: ${LOOKER_1_URL}
  LOOKER_1_SECRET: ${LOOKER_1_SECRET}

  DBT_0_DATABASE: ${DBT_0_DATABASE}
  DBT_0_SCHEMA: ${DBT_0_SCHEMA}
  DBT_0_VERSION: ${DBT_0_VERSION}
  DBT_0_PROJECT_PATH: ${DBT_0_PROJECT_PATH}

  DBT_1_GITHUB_INSTALLATION_ID: ${DBT_1_GITHUB_INSTALLATION_ID}
  DBT_1_GITHUB_REPO_ID: ${DBT_1_GITHUB_REPO_ID}
  DBT_1_DATABASE: ${DBT_1_DATABASE}
  DBT_1_SCHEMA: ${DBT_1_SCHEMA}
  DBT_1_VERSION: ${DBT_1_VERSION}

  DBT_2_GITHUB_INSTALLATION_ID: ${DBT_2_GITHUB_INSTALLATION_ID}
  DBT_2_GITHUB_REPO_ID: ${DBT_2_GITHUB_REPO_ID}
  DBT_2_DATABASE: ${DBT_2_DATABASE}
  DBT_2_SCHEMA: ${DBT_2_SCHEMA}
  DBT_2_VERSION: ${DBT_2_VERSION}

  DBT_3_GITHUB_INSTALLATION_ID: ${DBT_3_GITHUB_INSTALLATION_ID}
  DBT_3_GITHUB_REPO_ID: ${DBT_3_GITHUB_REPO_ID}
  DBT_3_DATABASE: ${DBT_3_DATABASE}
  DBT_3_SCHEMA: ${DBT_3_SCHEMA}
  DBT_3_VERSION: ${DBT_3_VERSION}

  DBT_4_GITHUB_INSTALLATION_ID: ${DBT_4_GITHUB_INSTALLATION_ID}
  DBT_4_GITHUB_REPO_ID: ${DBT_4_GITHUB_REPO_ID}
  DBT_4_DATABASE: ${DBT_4_DATABASE}
  DBT_4_SCHEMA: ${DBT_4_SCHEMA}
  DBT_4_THREADS: ${DBT_4_THREADS}
  DBT_4_VERSION: ${DBT_4_VERSION}
  DBT_4_PROJECT_PATH: ${DBT_4_PROJECT_PATH}

  TABLEAU_0_RESOURCE_NAME: ${TABLEAU_0_RESOURCE_NAME}
  TABLEAU_0_CONNECT_URI: ${TABLEAU_0_CONNECT_URI}
  TABLEAU_0_SITE: ${TABLEAU_0_SITE}
  TABLEAU_0_USERNAME: ${TABLEAU_0_USERNAME}
  TABLEAU_0_PASSWORD: ${TABLEAU_0_PASSWORD}

# hardcode local storage credentials to override remote ones in `.env.staging`
x-storage-credentials: &storage-credentials
  AWS_S3_ACCESS_KEY_ID: &s3-id minio_admin
  AWS_S3_SECRET_ACCESS_KEY: &s3-key minio_password
  AWS_S3_STORAGE_BUCKET_NAME: &s3-bucket artifacts
  AWS_S3_ENDPOINT_URL: &s3-url http://minio:9000

  MINIO_ROOT_USER: *s3-id
  MINIO_ROOT_PASSWORD: *s3-key
  MINIO_BUCKET_NAME: *s3-bucket
  MINIO_ENDPOINT: *s3-url

name: turntable-dev-internal

services:
  api:
    extends:
      file: docker-compose.dev.yml
      service: api
    build:
      args:
        - ENV=dev-internal
    command: >
      /bin/sh -c "
      python manage.py migrate &&
      python manage.py seed_data &&
      python manage.py seed_data_staging &&
      uvicorn api.asgi:application --host 0.0.0.0 --port 8000 --reload"
    environment:
      <<: [*internal-credentials, *storage-credentials]

  web:
    extends:
      file: docker-compose.dev.yml
      service: web

  redis:
    extends:
      file: docker-compose.dev.yml
      service: redis

  postgres:
    extends:
      file: docker-compose.dev.yml
      service: postgres

  create_hatchet_db:
    extends:
      file: docker-compose.dev.yml
      service: create_hatchet_db

  minio:
    extends:
      file: docker-compose.dev.yml
      service: minio
    environment:
      <<: *storage-credentials

  createbuckets:
    extends:
      file: docker-compose.dev.yml
      service: createbuckets
    environment:
      <<: *storage-credentials

  hatchet-lite:
    extends:
      file: docker-compose.dev.yml
      service: hatchet-lite

  setup-hatchet:
    extends:
      file: docker-compose.dev.yml
      service: setup-hatchet

  worker:
    extends:
      file: docker-compose.dev.yml
      service: worker
    environment:
      <<: [*internal-credentials, *storage-credentials]
      
  ## Test resources
  postgres_test_db:
    extends:
      file: docker-compose.dev.yml
      service: postgres_test_db

  populate_postgres_test_db:
    extends:
      file: docker-compose.dev.yml
      service: populate_postgres_test_db

  ensure_populate_test_db:
    extends:
      file: docker-compose.dev.yml
      service: ensure_populate_test_db

  metabase:
    extends:
      file: docker-compose.dev.yml
      service: metabase

  ready:
    extends:
      file: docker-compose.dev.yml
      service: ready

volumes:
  postgres_data:
  minio_data:
  hatchet_lite_rabbitmq_data:
  hatchet_lite_config:
  hatchet_credentials_handoff:
  postgres_test_db_data:
  frontend_data:

networks:
  default:
    name: app_network_dev_internal
    driver: bridge
