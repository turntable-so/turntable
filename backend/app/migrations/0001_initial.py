# Generated by Django 5.0.6 on 2024-08-15 16:27

import uuid

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import pgvector.django.vector
from django.conf import settings
from django.db import migrations, models
from pgvector.django import VectorExtension

import app.services.storage_backends
import app.utils.fields
import vinyl.lib.dbt_methods


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        VectorExtension(),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.TextField(editable=False, primary_key=True, serialize=False),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("model", "Model"),
                            ("source", "Source"),
                            ("seed", "Seed"),
                            ("analysis", "Analysis"),
                            ("metric", "Metric"),
                            ("snapshot", "Snapshot"),
                            ("view", "View"),
                            ("chart", "Chart"),
                            ("dashboard", "Dashboard"),
                            ("dataset", "Dataset"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, null=True)),
                ("description", models.TextField(null=True)),
                ("ai_description", models.TextField(null=True)),
                ("sql", models.TextField(null=True)),
                ("config", models.JSONField(null=True)),
                ("unique_name", models.TextField(null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "tests",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "materialization",
                    models.TextField(
                        choices=[
                            ("view", "View"),
                            ("table", "Table"),
                            ("materialized_view", "Materialized View"),
                            ("ephemeral", "Ephemeral"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "db_location",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ResourceDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "subtype",
                    models.CharField(
                        choices=[
                            ("looker", "Looker"),
                            ("metabase", "Metabase"),
                            ("bigquery", "BigQuery"),
                            ("snowflake", "Snowflake"),
                            ("postgres", "Postgres"),
                            ("duckdb", "File"),
                            ("file", "File"),
                        ],
                        max_length=255,
                    ),
                ),
                ("config", models.JSONField()),
                ("encrypted", app.utils.fields.EncryptedJSONField()),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DBTResource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("config", models.JSONField()),
                ("encrypted", app.utils.fields.EncryptedJSONField()),
                ("manifest_json", models.JSONField(null=True)),
                ("catalog_json", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.TextField(null=True)),
                (
                    "type",
                    models.TextField(
                        choices=[("db", "Database"), ("bi", "BI Tool")], null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("datahub_db", models.FileField(null=True, upload_to="datahub_dbs/")),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("profile_image_url", models.URLField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Column",
            fields=[
                (
                    "id",
                    models.TextField(editable=False, primary_key=True, serialize=False),
                ),
                ("name", models.TextField()),
                ("type", models.TextField(null=True)),
                ("nullable", models.BooleanField(null=True)),
                ("description", models.TextField(null=True)),
                ("ai_description", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tests",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.asset"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataFileDetails",
            fields=[
                (
                    "resourcedetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.resourcedetails",
                    ),
                ),
                ("path", models.TextField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.resourcedetails",),
        ),
        migrations.CreateModel(
            name="DBDetails",
            fields=[
                (
                    "resourcedetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.resourcedetails",
                    ),
                ),
                ("lookback_days", models.IntegerField(null=True)),
                (
                    "database_include",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "database_exclude",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "schema_include",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "schema_exclude",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "table_include",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "table_exclude",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                ("use_only_dbt_schemas", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.resourcedetails",),
        ),
        migrations.CreateModel(
            name="MetabaseDetails",
            fields=[
                (
                    "resourcedetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.resourcedetails",
                    ),
                ),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(max_length=255)),
                ("connect_uri", models.URLField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.resourcedetails",),
        ),
        migrations.CreateModel(
            name="DBTCloudDetails",
            fields=[
                (
                    "dbtresource_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbtresource",
                    ),
                ),
                ("api_token", models.CharField(max_length=255)),
                ("account_id", models.CharField(max_length=255)),
                ("project_id", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbtresource",),
        ),
        migrations.AddField(
            model_name="dbtresource",
            name="creator",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dbtresource",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.CreateModel(
            name="Notebook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255, null=True)),
                ("description", models.TextField(null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                ("contents", models.JSONField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notebooks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="resourcedetails",
            name="resource",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="details",
                to="app.resource",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="creator",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dbtresource",
            name="resource",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.resource",
            ),
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("config", models.JSONField(null=True)),
                (
                    "results",
                    models.FileField(
                        null=True,
                        storage=app.services.storage_backends.CustomS3Boto3Storage(),
                        upload_to="results/",
                    ),
                ),
                (
                    "notebook",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blocks",
                        to="app.notebook",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blocks",
                        to="app.resource",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="resource",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.resource",
            ),
        ),
        migrations.CreateModel(
            name="WorkflowRun",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("RUNNING", "Running"),
                            ("FAILED", "Failed"),
                            ("SUCCESS", "Success"),
                        ]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "resource",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workflow_runs",
                        to="app.resource",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=1000)),
                ("icon_url", models.URLField(blank=True, null=True)),
                (
                    "icon_file",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=app.services.storage_backends.PublicMediaStorage(),
                        upload_to="assets/icons/",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="workspaces", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "permissions": [("manage_workspace", "Can manage workspace")],
            },
        ),
        migrations.AddField(
            model_name="resourcedetails",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.workspace",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.workspace",
            ),
        ),
        migrations.AddField(
            model_name="notebook",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notebooks",
                to="app.workspace",
            ),
        ),
        migrations.CreateModel(
            name="GithubInstallation",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("ssh_key", models.TextField(null=True)),
                ("git_url", models.URLField(null=True)),
                ("git_repo_type", models.CharField(max_length=255, null=True)),
                ("main_git_branch", models.CharField(max_length=255, null=True)),
                ("name", models.CharField(max_length=255, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dbtresource",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.workspace",
            ),
        ),
        migrations.CreateModel(
            name="ColumnLink",
            fields=[
                (
                    "id",
                    models.TextField(editable=False, primary_key=True, serialize=False),
                ),
                (
                    "lineage_type",
                    models.CharField(
                        choices=[("all", "All"), ("direct_only", "Direct Only")],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "connection_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("confidence", models.FloatField(null=True)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_links",
                        to="app.column",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_links",
                        to="app.column",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="column",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.workspace",
            ),
        ),
        migrations.CreateModel(
            name="AssetLink",
            fields=[
                (
                    "id",
                    models.TextField(editable=False, primary_key=True, serialize=False),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_links",
                        to="app.asset",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_links",
                        to="app.asset",
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetError",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("error", models.JSONField(null=True)),
                ("lineage_type", models.TextField(null=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.asset"
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetEmbedding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "autocomplete_vector",
                    pgvector.django.vector.VectorField(dimensions=1536, null=True),
                ),
                (
                    "search_vector",
                    pgvector.django.vector.VectorField(dimensions=1536, null=True),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.asset"
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="workspace",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.workspace",
            ),
        ),
        migrations.CreateModel(
            name="WorkspaceGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "permissions",
                    models.ManyToManyField(blank=True, to="auth.permission"),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="workspace_groups", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groups",
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BigqueryDetails",
            fields=[
                (
                    "dbdetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbdetails",
                    ),
                ),
                ("service_account", models.JSONField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbdetails",),
        ),
        migrations.CreateModel(
            name="DuckDBDetails",
            fields=[
                (
                    "dbdetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbdetails",
                    ),
                ),
                ("path", models.TextField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbdetails",),
        ),
        migrations.CreateModel(
            name="PostgresDetails",
            fields=[
                (
                    "dbdetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbdetails",
                    ),
                ),
                ("host", models.CharField(max_length=255)),
                ("port", models.IntegerField()),
                ("database", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbdetails",),
        ),
        migrations.CreateModel(
            name="SnowflakeDetails",
            fields=[
                (
                    "dbdetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbdetails",
                    ),
                ),
                ("account", models.CharField(max_length=255)),
                ("warehouse", models.CharField(max_length=255)),
                ("database", models.CharField(max_length=255)),
                ("schema", models.CharField(max_length=255)),
                ("username", models.CharField(max_length=255)),
                ("password", models.CharField(max_length=255)),
                ("role", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbdetails",),
        ),
        migrations.CreateModel(
            name="LookerDetails",
            fields=[
                (
                    "resourcedetails_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.resourcedetails",
                    ),
                ),
                ("base_url", models.URLField()),
                ("client_id", models.CharField(max_length=255)),
                ("client_secret", models.CharField(max_length=255)),
                ("github_repo_id", models.IntegerField(null=True)),
                ("project_path", models.CharField(max_length=255, null=True)),
                (
                    "github_installation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.githubinstallation",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.resourcedetails",),
        ),
        migrations.CreateModel(
            name="DBTCoreDetails",
            fields=[
                (
                    "dbtresource_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="app.dbtresource",
                    ),
                ),
                (
                    "subtype",
                    models.CharField(
                        choices=[("core", "Core"), ("cloud", "Cloud")], max_length=255
                    ),
                ),
                ("github_repo_id", models.IntegerField(null=True)),
                ("project_path", models.CharField(max_length=255)),
                ("database", models.CharField(max_length=255)),
                ("schema", models.CharField(max_length=255)),
                (
                    "other_schemas",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        null=True,
                        size=None,
                    ),
                ),
                ("threads", models.IntegerField(default=1, null=True)),
                (
                    "version",
                    models.CharField(
                        choices=[
                            (vinyl.lib.dbt_methods.DBTVersion["V1_3"], "1.3"),
                            (vinyl.lib.dbt_methods.DBTVersion["V1_4"], "1.4"),
                            (vinyl.lib.dbt_methods.DBTVersion["V1_5"], "1.5"),
                            (vinyl.lib.dbt_methods.DBTVersion["V1_6"], "1.6"),
                            (vinyl.lib.dbt_methods.DBTVersion["V1_7"], "1.7"),
                        ],
                        max_length=255,
                    ),
                ),
                ("env_vars", models.JSONField(null=True)),
                (
                    "github_installation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.githubinstallation",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("app.dbtresource",),
        ),
        migrations.CreateModel(
            name="SSHKey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("public_key", models.TextField()),
                ("private_key", models.TextField()),
                (
                    "workspace",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.workspace",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["workspace_id"], name="app_sshkey_workspa_cacad8_idx"
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="resourcedetails",
            index=models.Index(
                fields=["resource_id"], name="app_resourc_resourc_4c9b2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(
                fields=["workspace_id"], name="app_resourc_workspa_c9e70d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notebook",
            index=models.Index(
                fields=["tenant_id"], name="app_noteboo_tenant__62c3d1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="githubinstallation",
            index=models.Index(
                fields=["workspace_id"], name="app_githubi_workspa_890585_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="columnlink",
            index=models.Index(
                fields=["workspace_id"], name="app_columnl_workspa_660691_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="columnlink",
            index=models.Index(
                fields=["source_id"], name="app_columnl_source__d14bd8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="columnlink",
            index=models.Index(
                fields=["target_id"], name="app_columnl_target__fc5751_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="column",
            index=models.Index(
                fields=["workspace_id"], name="app_column_workspa_f8b31e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="column",
            index=models.Index(
                fields=["asset_id"], name="app_column_asset_i_963a8b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assetlink",
            index=models.Index(
                fields=["source_id", "target_id"], name="app_assetli_source__d2fe60_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assetlink",
            index=models.Index(
                fields=["workspace_id"], name="app_assetli_workspa_e0ae34_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asseterror",
            index=models.Index(
                fields=["workspace_id"], name="app_asseter_workspa_b49433_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assetembedding",
            index=models.Index(
                fields=["workspace_id"], name="app_assetem_workspa_01aa20_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["workspace_id"], name="app_asset_workspa_f5721a_idx"
            ),
        ),
    ]
