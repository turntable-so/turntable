# Generated by Django 5.0.6 on 2024-07-08 23:45

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("model", "Model"),
                            ("source", "Source"),
                            ("seed", "Seed"),
                            ("analysis", "Analysis"),
                            ("metric", "Metric"),
                            ("snapshot", "Snapshot"),
                            ("view", "View"),
                            ("chart", "Chart"),
                            ("dashboard", "Dashboard"),
                            ("dataset", "Dataset"),
                        ],
                        max_length=20,
                    ),
                ),
                ("read_only", models.BooleanField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("updated_by", models.UUIDField(null=True)),
                (
                    "viewers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("name", models.CharField(max_length=255, null=True)),
                ("description", models.TextField(null=True)),
                ("ai_description", models.TextField(null=True)),
                ("config", models.JSONField(null=True)),
                ("unique_name", models.TextField(null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                ("status", models.TextField(null=True)),
                (
                    "tests",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                ("materialization", models.TextField(null=True)),
                (
                    "db_location",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("profile_image_url", models.URLField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(null=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.DateTimeField(null=True)),
                ("updated_by", models.UUIDField(null=True)),
                ("config", models.JSONField(null=True)),
                ("tenant_id", models.TextField(null=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_block_tenant__384a0e_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Column",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                ("description", models.TextField(null=True)),
                ("ai_description", models.TextField(null=True)),
                ("is_pk", models.BooleanField(db_column="pk", null=True)),
                ("unique", models.BooleanField(null=True)),
                ("is_fk", models.BooleanField(db_column="fk", null=True)),
                ("pii", models.BooleanField(null=True)),
                ("errors", models.JSONField(null=True)),
                ("table_unique_name", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tests",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.asset"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ColumnLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("lineage_type", models.CharField(max_length=255)),
                (
                    "connection_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_links",
                        to="app.column",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_links",
                        to="app.column",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GithubInstallation",
            fields=[
                (
                    "id",
                    models.CharField(
                        db_column="installation_id",
                        default=uuid.uuid4,
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tenant_id", models.CharField(max_length=255)),
                ("user_id", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_githubi_tenant__f7e3ea_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Model",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(max_length=255)),
                ("schema", models.JSONField()),
                ("sql", models.TextField(null=True)),
                ("tenant_id", models.TextField(null=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_model_tenant__839162_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Notebook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.UUIDField(null=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.UUIDField(null=True)),
                ("updated_by", models.UUIDField(null=True)),
                ("title", models.CharField(max_length=255, null=True)),
                ("description", models.TextField(null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_noteboo_tenant__62c3d1_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="NotebookBlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField(null=True)),
                ("tenant_id", models.TextField(null=True)),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.block"
                    ),
                ),
                (
                    "notebook",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.notebook"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(max_length=255, null=True)),
                ("encrypted_secret", models.TextField()),
                ("description", models.TextField(null=True)),
                ("tenant_id", models.TextField()),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_profile_tenant__054be5_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("github_repo_id", models.CharField(max_length=255, null=True)),
                ("repo_owner", models.CharField(max_length=255, null=True)),
                ("repo_name", models.CharField(max_length=255, null=True)),
                ("default_branch", models.CharField(max_length=255, null=True)),
                (
                    "tables",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                ("status", models.TextField(null=True)),
                ("tenant_id", models.TextField(null=True)),
                ("repo_file", models.FileField(null=True, upload_to="repos/")),
                (
                    "github_installation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.githubinstallation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Graph",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("updated_by", models.UUIDField(null=True)),
                ("file", models.FileField(upload_to="graphs/")),
                (
                    "repository",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.repository",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetError",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("error", models.JSONField(null=True)),
                ("lineage_type", models.TextField(null=True)),
                ("tenant_id", models.TextField(null=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.asset"
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.repository",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="repository",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.repository",
            ),
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("type", models.CharField(max_length=255)),
                ("tenant_id", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("updated_by", models.UUIDField(null=True)),
                (
                    "tables",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("config", models.JSONField(null=True)),
                ("name", models.TextField(null=True)),
                ("github_repo_id", models.TextField(null=True)),
                (
                    "profile",
                    models.ForeignKey(
                        db_column="auth_profile_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.profile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="repository",
            name="resource",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="app.resource",
            ),
        ),
        migrations.CreateModel(
            name="DatahubCache",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("created_by", models.UUIDField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("updated_by", models.UUIDField(null=True)),
                ("file", models.FileField(upload_to="e2e_dbs/")),
                (
                    "repository",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.repository",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.resource",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="resource",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.resource",
            ),
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=1000)),
                ("icon_url", models.URLField(blank=True, null=True)),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="workspaces", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "permissions": [("manage_workspace", "Can manage workspace")],
            },
        ),
        migrations.CreateModel(
            name="WorkspaceGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "permissions",
                    models.ManyToManyField(blank=True, to="auth.permission"),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="workspace_groups", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groups",
                        to="app.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("type", models.CharField(max_length=255)),
                ("tenant_id", models.TextField(null=True)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_links",
                        to="app.asset",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_links",
                        to="app.asset",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["source_id", "target_id"],
                        name="app_assetli_source__d2fe60_idx",
                    ),
                    models.Index(
                        fields=["tenant_id"], name="app_assetli_tenant__892d3c_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlockLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tenant_id", models.TextField(null=True)),
                (
                    "source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_links",
                        to="app.block",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_links",
                        to="app.block",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["tenant_id"], name="app_blockli_tenant__26b7d6_idx"
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="column",
            index=models.Index(
                fields=["asset_id"], name="app_column_asset_i_963a8b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="column",
            index=models.Index(
                fields=["tenant_id"], name="app_column_tenant__52b435_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="columnlink",
            index=models.Index(
                fields=["source_id", "target_id"], name="app_columnl_source__63add0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="columnlink",
            index=models.Index(
                fields=["tenant_id"], name="app_columnl_tenant__ff88eb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notebookblock",
            index=models.Index(
                fields=["tenant_id"], name="app_noteboo_tenant__ad6219_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graph",
            index=models.Index(
                fields=["tenant_id"], name="app_graph_tenant__37e204_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asseterror",
            index=models.Index(
                fields=["tenant_id"], name="app_asseter_tenant__9459a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(
                fields=["tenant_id"], name="app_resourc_tenant__c71d5f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="repository",
            index=models.Index(
                fields=["tenant_id"], name="app_reposit_tenant__bfeb8f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datahubcache",
            index=models.Index(
                fields=["tenant_id"], name="app_datahub_tenant__ad60d0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["tenant_id"], name="app_asset_tenant__1bfa58_idx"
            ),
        ),
    ]
