{
    "name": "databricks",
    "keywords": [
        "ANTI",
        "CROSS",
        "EXCEPT",
        "FULL",
        "INNER",
        "INTERSECT",
        "JOIN",
        "LATERAL",
        "LEFT",
        "MINUS",
        "NATURAL",
        "ON",
        "RIGHT",
        "SEMI",
        "UNION",
        "USING",
        "ANTI",
        "CROSS",
        "EXCEPT",
        "FULL",
        "INNER",
        "INTERSECT",
        "JOIN",
        "LATERAL",
        "LEFT",
        "MINUS",
        "NATURAL",
        "ON",
        "RIGHT",
        "SEMI",
        "UNION",
        "USING",
        "NULL",
        "DEFAULT",
        "TRUE",
        "FALSE",
        "LATERAL",
        "BUILTIN",
        "SESSION",
        "INFORMATION_SCHEMA",
        "ALL",
        " ALTER",
        " AND",
        " ANY",
        " ARRAY",
        " AS",
        " AT",
        " AUTHORIZATION",
        "BETWEEN",
        " BOTH",
        " BY",
        "CASE",
        " CAST",
        " CHECK",
        " COLLATE",
        " COLUMN",
        " COMMIT",
        " CONSTRAINT",
        " CREATE",
        " CROSS",
        " CUBE",
        " CURRENT",
        " CURRENT_DATE",
        "\nCURRENT_TIME",
        " CURRENT_TIMESTAMP",
        " CURRENT_USER",
        "DELETE",
        " DESCRIBE",
        " DISTINCT",
        " DROP",
        "ELSE",
        " END",
        " ESCAPE",
        " EXCEPT",
        " EXISTS",
        " EXTERNAL",
        " EXTRACT",
        "FALSE",
        " FETCH",
        " FILTER",
        " FOR",
        " FOREIGN",
        " FROM",
        " FULL",
        " FUNCTION",
        "GLOBAL",
        " GRANT",
        " GROUP",
        " GROUPING",
        "HAVING",
        "IN",
        " INNER",
        " INSERT",
        " INTERSECT",
        " INTERVAL",
        " INTO",
        " IS",
        "JOIN",
        "LEADING",
        " LEFT",
        " LIKE",
        " LOCAL",
        "NATURAL",
        " NO",
        " NOT",
        " NULL",
        "OF",
        " ON",
        " ONLY",
        " OR",
        " ORDER",
        " OUT",
        " OUTER",
        " OVERLAPS",
        "PARTITION",
        " POSITION",
        " PRIMARY",
        "RANGE",
        " REFERENCES",
        " REVOKE",
        " RIGHT",
        " ROLLBACK",
        " ROLLUP",
        " ROW",
        " ROWS",
        "SELECT",
        " SESSION_USER",
        " SET",
        " SOME",
        " START",
        "TABLE",
        " TABLESAMPLE",
        " THEN",
        " TIME",
        " TO",
        " TRAILING",
        " TRUE",
        " TRUNCATE",
        "UNION",
        " UNIQUE",
        " UNKNOWN",
        " UPDATE",
        " USER",
        " USING",
        "VALUES",
        "WHEN",
        " WHERE",
        " WINDOW",
        " WITH"
    ],
    "functions": [
        {
            "name": "abs",
            "description": "Returns the absolute value of the numeric value in expr.",
            "syntax": "abs(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "acos",
            "description": "Returns the inverse cosine (arccosine) of expr.",
            "syntax": "acos(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "acosh",
            "description": "Returns the inverse hyperbolic cosine of expr.",
            "syntax": "acosh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "add_months",
            "description": "Returns the date that is numMonths after startDate.",
            "syntax": "add_months(startDate, numMonths)",
            "arguments": [
                {
                    "name": "startDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "numMonths",
                    "description": "An integral number.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "aes_decrypt",
            "description": "Decrypts a binary produced using AES encryption.",
            "syntax": "aes_decrypt(expr, key [, mode [, padding [, aad]]])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "The BINARY expression to be decrypted.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "A BINARY expression. Must match the key originally used to produce the encrypted value and be 16, 24, or 32 bytes long.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "mode",
                    "description": "An optional STRING expression describing the encryption mode used to produce the encrypted value.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "padding",
                    "description": "An optional STRING expression describing how encryption handled padding of the value to key length.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "aad",
                    "description": "An optional STRING expression providing authenticated additional data (AAD) in GCM mode. Must match the aad used to produce the encrypted value.\nApplies to Databricks SQL and Databricks Runtime 13.3 LTS and above.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "aes_encrypt",
            "description": "Encrypts a binary using AES encryption.",
            "syntax": "aes_encrypt(expr, key [, mode [, padding[, iv[, aad]]]])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "The BINARY expression to be encrypted.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "A BINARY expression. The key to be used to encrypt expr. It must be 16, 24, or 32 bytes long.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "mode",
                    "description": "An optional STRING expression describing the encryption mode.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "padding",
                    "description": "An optional STRING expression describing how encryption handles padding of the value to key length.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "iv",
                    "description": "An optional STRING expression providing an initialization vector (IV) for GCM or CBC modes. Applies to Databricks SQL and Databricks Runtime 13.3 LTS and above.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "aad",
                    "description": "An optional STRING expression providing authenticated additional data (AAD) in GCM mode. Applies to Databricks SQL and Databricks Runtime 13.3 LTS and above.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "aggregate",
            "description": "Aggregates elements in an array using a custom aggregator. This function is a synonym for reduce function.",
            "syntax": "aggregate(expr, start, merge [, finish])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "An initial value of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "merge",
                    "description": "A lambda function used to aggregate the current element.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "finish",
                    "description": "An optional lambda function used to finalize the aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "ai_analyze_sentiment",
            "description": "Preview",
            "syntax": "ai_analyze_sentiment(content)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression, the text to be analyzed.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_classify",
            "description": "Preview",
            "syntax": "ai_classify(content, labels)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression, the text to be classified.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "labels",
                    "description": "An ARRAY<STRING> literal, the expected output classification labels. Must contain at least 2 elements, and no more than 20 elements.",
                    "type": "ARRAY<STRING>",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_extract",
            "description": "Preview",
            "syntax": "ai_extract(content, labels)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "labels",
                    "description": "An ARRAY<STRING> literal. Each element is a type of entity to be extracted.",
                    "type": "ARRAY<STRING>",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_fix_grammar",
            "description": "Preview",
            "syntax": "ai_fix_grammar(content)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_gen",
            "description": "Preview",
            "syntax": "ai_gen(prompt)",
            "arguments": [
                {
                    "name": "prompt",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_generate_text",
            "description": "Preview",
            "syntax": "ai_generate_text(prompt, modelName[, param1, value1] [...])",
            "arguments": [
                {
                    "name": "prompt",
                    "description": "A string expression, the text prompt that is passed to the selected LLM.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "modelName",
                    "description": "A STRING literal, only 'openai/gpt-3.5-turbo' and 'azure_openai/gpt-35-turbo' are supported.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "paramN and valueN",
                    "description": "key-value pairs to authenticate and configure the selected LLM. The keys must be string literals and are case-sensitive. The types of the values depend on the following keys",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "Model 'openai/gpt-3.5-turbo' uses the chat completion API from Open AI. It supports the following parameters",
                    "description": "'apiKey'",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "'apiKey'",
                    "description": "Required. The OpenAI API key to access the model endpoint. The value specified can not be an explicit constant string. Recommended value includes secret(scope, key) function and SELECT ... scalar subquery.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "'temperature'",
                    "description": "The sampling temperature to use. Its value is a numeric literal between 0 and 2. The default value is 1.0.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "stop",
                    "description": "Stop strings. Its value is a STRING literal or an ARRAY<STRING> of up to 4 string literals. The default value is null.",
                    "type": "STRING|ARRAY<STRING>",
                    "optional": false
                },
                {
                    "name": "Model 'azure_openai/gpt-35-turbo' uses the chat completion API from the Azure OpenAI Service. It accepts all parameters from the above 'openai/gpt-3.5-turbo' model and any additional parameters to construct the endpoint URL. Databricks only supports API Key authentication.\n\n'resourceName'",
                    "description": "Required. Its value is a string literal to specify the resource name.\n'deploymentName'",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "'resourceName'",
                    "description": "Required. Its value is a string literal to specify the resource name.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "'deploymentName'",
                    "description": "Required. Its value is a string literal to specify the deployment name.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "'apiVersion'",
                    "description": "Required. Its value is a string literal to specify the API version to use.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_mask",
            "description": "Preview",
            "syntax": "ai_mask(content, labels)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "labels",
                    "description": "An ARRAY<STRING> literal. Each element represents a type of information to be masked.",
                    "type": "ARRAY<STRING>",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_query",
            "description": "Preview",
            "syntax": "ai_query(endpointName, request)",
            "arguments": [
                {
                    "name": "endpointName",
                    "description": "A STRING literal, the name of the existing Databricks Model Serving endpoint in the same workspace for invocations. The definer must have CAN QUERY permission on the endpoint.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "request",
                    "description": "An expression, the request used to invoke the endpoint.\n\nIf the endpoint is an external model serving endpoint or Databricks Foundation Model APIs endpoint, the request must be a STRING.\nIf the endpoint is a custom model serving endpoint, the request can be a single column or a struct expression. The struct field names should match the input feature names expected by the endpoint.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "returnType",
                    "description": "An expression, the expected returnType from the endpoint. This is similar to the schema parameter in from_json function, which accepts both A STRING expression or invocation of schema_of_json function. Required for querying a custom Model Serving Endpoint.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_similarity",
            "description": "Preview",
            "syntax": "ai_similarity(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ai_summarize",
            "description": "Preview",
            "syntax": "ai_summarize(content[, max_words])",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression, the text to be summarized.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "max_words",
                    "description": "An optional non-negative integral numeric expression representing the best-effort target number of words in the returned summary text. The default value is 50. If set to 0, there is no word limit.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "ai_translate",
            "description": "Preview",
            "syntax": "ai_translate(content, to_lang)",
            "arguments": [
                {
                    "name": "content",
                    "description": "A STRING expression, the text to be translated.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "to_lang",
                    "description": "A STRING expression, the target language code to translate the content to.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ampersandsign",
            "description": "Returns the bitwise AND of expr1 and expr2.",
            "syntax": "expr1 & expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "and",
            "description": "Returns the logical AND of expr1 and expr2.",
            "syntax": "expr1 and expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A BOOLEAN expression",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "A BOOLEAN expression",
                    "type": "BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "any",
            "description": "Returns true if at least one value of expr in the group is true. The any aggregate function is synonymous to max aggregate function, but limited to a boolean argument.",
            "syntax": "any(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "any_value",
            "description": "Returns some value of expr for a group of rows. This function is non-deterministic.",
            "syntax": "any_value(expr[, ignoreNull]) [FILTER ( WHERE cond ) ] [ IGNORE NULLS | RESPECT NULLS ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ignoreNull",
                    "description": "An optional BOOLEAN literal defaulting to false. The default for ignoreNull is false.",
                    "type": "BOOLEAN",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used or ignoreNull is true any expr value that is NULL is ignored.\nThe default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "approx_count_distinct",
            "description": "Returns the estimated number of distinct values in expr within the group.",
            "syntax": "approx_count_distinct(expr[, relativeSD]) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Can be of any type for which equivalence is defined.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "relativeSD",
                    "description": "Defines the maximum relative standard deviation allowed.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "approx_percentile",
            "description": "Returns the approximate percentile of the expr within the group.",
            "syntax": "approx_percentile ( [ALL | DISTINCT] expr, percentile [, accuracy] ) [ FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "percentile",
                    "description": "A numeric literal between 0 and 1 or a literal array of numeric values, each between 0 and 1.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "accuracy",
                    "description": "An INTEGER literal greater than 0. If accuracy is omitted it is set to 10000.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "approx_top_k",
            "description": "Returns the top k most frequently occurring item values in an expr along with their approximate counts.",
            "syntax": "approx_top_k(expr[, k[, maxItemsTracked]]) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of STRING, BOOLEAN, DATE, TIMESTAMP, or numeric type.",
                    "type": "STRING,|BOOLEAN,|DATE,|TIMESTAMP,",
                    "optional": false
                },
                {
                    "name": "k",
                    "description": "An optional INTEGER literal greater than 0. If k is not specified, it defaults to 5.",
                    "type": "INTEGER",
                    "optional": true
                },
                {
                    "name": "maxItemsTracked",
                    "description": "An optional INTEGER literal greater than or equal to k. If maxItemsTracked is not specified, it defaults to 10000.",
                    "type": "INTEGER",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "array",
            "description": "Returns an array with the elements in expr.",
            "syntax": "array(expr [, ...])",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "Elements of any type that share a least common type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_agg",
            "description": "Returns an array consisting of all values in expr within the group. This function is a synonym for collect_list aggregate function.",
            "syntax": "array_agg ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "array_append",
            "description": "Returns array appended by elem.",
            "syntax": "array_append(array, elem)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "elem",
                    "description": "An expression of the same type as the elements of array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_compact",
            "description": "Removes NULL elements from array.",
            "syntax": "array_compact(array)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_contains",
            "description": "Returns true if array contains value.",
            "syntax": "array_contains(array, value)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY to be searched.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "value",
                    "description": "An expression with a type sharing a least common type with the array elements.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_distinct",
            "description": "Removes duplicate values from array.",
            "syntax": "array_distinct(array)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_except",
            "description": "Returns an array of the elements in array1 but not in array2.",
            "syntax": "array_except(array1, array2)",
            "arguments": [
                {
                    "name": "array1",
                    "description": "An ARRAY of any type with comparable elements.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "array2",
                    "description": "An ARRAY of elements sharing a least common type with the elements of array1.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_insert",
            "description": "Returns an expanded array where elem is inserted at the index position.",
            "syntax": "array_insert(array, index, elem)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "index",
                    "description": "A non-zero INTEGER expression specifying where to insert elem. If index is negative elem is inserted relative to the end of the array.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "elem",
                    "description": "An expression of the same type as the elements of array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_intersect",
            "description": "Returns an array of the elements in the intersection of array1 and array2.",
            "syntax": "array_intersect(array1, array2)",
            "arguments": [
                {
                    "name": "array1",
                    "description": "An ARRAY of any type with comparable elements.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "array2",
                    "description": "n ARRAY of elements sharing a least common type with the elements of array1.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_join",
            "description": "Concatenates the elements of array.",
            "syntax": "array_join(array, delimiter [, nullReplacement])",
            "arguments": [
                {
                    "name": "array",
                    "description": "Any ARRAY type, but its elements are interpreted as strings.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "delimiter",
                    "description": "A STRING used to separate the concatenated array elements.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "nullReplacement",
                    "description": "A STRING used to express a NULL value in the result.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_max",
            "description": "Returns the maximum value in array.",
            "syntax": "array_max(array)",
            "arguments": [
                {
                    "name": "array",
                    "description": "Any ARRAY with elements for which order is supported.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_min",
            "description": "Returns the minimum value in array.",
            "syntax": "array_min(array)",
            "arguments": [
                {
                    "name": "array",
                    "description": "Any ARRAY with elements for which order is supported.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_position",
            "description": "Returns the position of the first occurrence of element in array.",
            "syntax": "array_position(array, element)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY with comparable elements.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "element",
                    "description": "An expression matching the types of the elements in array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_prepend",
            "description": "Returns array prepended by elem.",
            "syntax": "array_prepend(array, elem)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "elem",
                    "description": "An expression of the same type as the elements of array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_remove",
            "description": "Removes all occurrences of element from array.",
            "syntax": "array_remove(array, element)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "element",
                    "description": "An expression of a type sharing a least common type with the elements of array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_repeat",
            "description": "Returns an array containing element count times.",
            "syntax": "array_repeat(element, count)",
            "arguments": [
                {
                    "name": "element",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "count",
                    "description": "An INTEGER greater or equal to 0.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_size",
            "description": "Returns the number of elements in array.",
            "syntax": "array_size(array)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "array_sort",
            "description": "Returns array sorted according to func.",
            "syntax": "array_sort(array, func)",
            "arguments": [
                {
                    "name": "array",
                    "description": "An expression that evaluates to an array.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function defining the sort order.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "array_union",
            "description": "Returns an array of the elements in the union of array1 and array2 without duplicates.",
            "syntax": "array_union(array1, array2)",
            "arguments": [
                {
                    "name": "array1",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "array2",
                    "description": "An ARRAY of the same type as array1.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "arrays_overlap",
            "description": "Returns true if the intersection of array1 and array2 is not empty.",
            "syntax": "arrays_overlap (array1, array2)",
            "arguments": [
                {
                    "name": "array1",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                },
                {
                    "name": "array2",
                    "description": "An ARRAY sharing a least common type with array1.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "arrays_zip",
            "description": "Returns a merged array of structs in which the nth struct contains all nth values of input arrays.",
            "syntax": "arrays_zip (array1 [, ...])",
            "arguments": [
                {
                    "name": "arrayN",
                    "description": "An ARRAY.",
                    "type": "ARRAY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "ascii",
            "description": "Returns the ASCII code point of the first character of str.",
            "syntax": "ascii(str)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING.",
                    "type": "STRING.",
                    "optional": false
                }
            ]
        },
        {
            "name": "asin",
            "description": "Returns the inverse sine (arcsine) of expr.",
            "syntax": "asin(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "asinh",
            "description": "Returns the inverse hyperbolic sine of expr.",
            "syntax": "asinh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "assert_true",
            "description": "Returns an error if expr is not true.",
            "syntax": "assert_true(condition [, message])",
            "arguments": [
                {
                    "name": "condition",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "message",
                    "description": "An optional STRING expression with a message. The default is '<condition>' is not true!.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "asterisksign",
            "description": "Returns multiplier multiplied by multiplicand.",
            "syntax": "multiplier * multiplicand",
            "arguments": [
                {
                    "name": "multiplier",
                    "description": "A numeric or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                },
                {
                    "name": "multiplicand",
                    "description": "A numeric expression or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "atan",
            "description": "Returns the inverse tangent (arctangent) of expr.",
            "syntax": "atan(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "atan2",
            "description": "Returns the angle in radians between the positive x-axis of a plane and the point specified by the coordinates (exprX, exprY).",
            "syntax": "atan2(exprY, exprX)",
            "arguments": [
                {
                    "name": "exprY",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "exprX",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "atanh",
            "description": "Returns inverse hyperbolic tangent of expr.",
            "syntax": "atanh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "avg",
            "description": "Returns the mean calculated from values of a group. This function is a synonym for mean aggregate function.",
            "syntax": "avg( [ALL | DISTINCT] expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or an interval.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bangeqsign",
            "description": "Returns true if expr1 does not equal expr2, or false otherwise. This function is a synonym for <> (lt gt sign) operator.",
            "syntax": "expr1 != expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "bangsign",
            "description": "Returns the logical NOT of a Boolean expression. This operator is a synonym for not operator.",
            "syntax": "!expr",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "base64",
            "description": "Converts expr to a base 64 string using RFC2045 Base64 transfer encoding for MIME.",
            "syntax": "base64(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression or a STRING which the function will interpret as BINARY.",
                    "type": "BINARY|STRING|BINARY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "between",
            "description": null,
            "syntax": "expr1 [not] between expr2 and expr3",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with all other arguments.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr3",
                    "description": "An expression that shares a least common type with all other arguments.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "bigint",
            "description": "Casts the value expr to BIGINT. This function is a synonym for CAST(expr AS BIGINT). See cast function for details.",
            "syntax": "bigint(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression which is castable to BIGINT.",
                    "type": "BIGINT.",
                    "optional": false
                }
            ]
        },
        {
            "name": "bin",
            "description": "Returns the binary representation of expr.",
            "syntax": "bin(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT expression.",
                    "type": "BIGINT",
                    "optional": false
                }
            ]
        },
        {
            "name": "binary",
            "description": "Casts the value of expr to BINARY. This function is a synonym for CAST(expr AS BINARY). See cast function for details.",
            "syntax": "binary(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression that that can be cast to BINARY.",
                    "type": "BINARY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "bit_and",
            "description": "Returns the bitwise AND of all input values in the group.",
            "syntax": "bit_and(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bit_count",
            "description": "Returns the number of bits set in the argument.",
            "syntax": "bit_count(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT or BOOLEAN expression.",
                    "type": "BIGINT|BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "bit_get",
            "description": "Returns the value of a bit in a binary representation of an integral numeric. This function  is a synonym for getbit function.",
            "syntax": "bit_get(expr, pos))",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An expression of type INTEGER.",
                    "type": "INTEGER.",
                    "optional": false
                }
            ]
        },
        {
            "name": "bit_length",
            "description": "Returns the bit length of string data or number of bits of binary data.",
            "syntax": "bit_length(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "bit_or",
            "description": "Returns the bitwise OR of all input values in the group.",
            "syntax": "bit_or(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bit_reverse",
            "description": "Returns the value obtained by reversing the order of the bits in the two\u2019s complement binary representation of the specified integral value.",
            "syntax": "bit_reverse(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "bit_xor",
            "description": "Returns the bitwise XOR of all input values in the group.",
            "syntax": "bit_xor ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bitmap_bit_position",
            "description": "Returns the 0-based bit position of a given BIGINT number within a bucket.",
            "syntax": "bitmap_bit_position(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT expression.",
                    "type": "BIGINT",
                    "optional": false
                }
            ]
        },
        {
            "name": "bitmap_bucket_number",
            "description": "Returns the bitmap bucket number for a given BIGINT number.",
            "syntax": "bitmap_bucket_number(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT expression.",
                    "type": "BIGINT",
                    "optional": false
                }
            ]
        },
        {
            "name": "bitmap_construct_agg",
            "description": "Returns the bitwise OR of all bit positions values in the group. between 0 and 32767 in a group as a BINARY.",
            "syntax": "bitmap_construct_agg(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An integral numeric expression between 0 and 32767 representing a bit position in a BINARY string.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bitmap_count",
            "description": "Returns the number of bits set in a BINARY string representing a bitmap.\nThis function is typically used to count distinct value in combination with the bitmap_bucket_number() and the bitmap_construct_agg() functions.",
            "syntax": "bitmap_count(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression, typically produced by bitmap_construct_agg().",
                    "type": "BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "bitmap_or_agg",
            "description": "Returns the bitwise OR of all BINARY input values in the group.",
            "syntax": "bitmap_or_agg(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY of length <= 4096 representing a bitmap. Databricks truncates longer values to 4096.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bool_and",
            "description": "Returns true if all values in expr are true within the group.",
            "syntax": "bool_and(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "bool_or",
            "description": "Returns true if at least one value in expr is true within the group.",
            "syntax": "bool_or(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "boolean",
            "description": "Casts expr to boolean. This function is a synonym for CAST(expr AS binary). See cast function for details.",
            "syntax": "boolean(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression that can be cast to BOOLEAN.",
                    "type": "BOOLEAN.",
                    "optional": false
                }
            ]
        },
        {
            "name": "bracketsign",
            "description": "Returns an array element or map value given an index or key.",
            "syntax": "expr [ keyExpr ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                },
                {
                    "name": "keyExpr",
                    "description": "If expr is an ARRAY an integral numeric.\nOtherwise an expression matching the type of the key of the MAP.",
                    "type": "ARRAY|MAP.",
                    "optional": false
                }
            ]
        },
        {
            "name": "bround",
            "description": "Returns the rounded expr using HALF_EVEN rounding mode.",
            "syntax": "bround(expr [,targetScale] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetScale",
                    "description": "An INTEGER constant expression. If targetScale is omitted the default is 0 (whole number).\nIn Databricks SQL and Databricks Runtime 12.2 LTS and above",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "btrim",
            "description": "Returns str with leading and trailing characters removed.",
            "syntax": "btrim( str [, trimStr ] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be trimmed.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "trimStr",
                    "description": "An optional STRING expression with characters to be trimmed. The default is a space character.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "cardinality",
            "description": "Returns the size of expr.",
            "syntax": "cardinality(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "caretsign",
            "description": "Returns the bitwise exclusive OR (XOR) of expr1 and expr2.",
            "syntax": "expr1 ^ expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "case",
            "description": "Returns resN for the first optN that equals expr or def if none matches.",
            "syntax": "CASE expr {WHEN opt1 THEN res1} [...] [ELSE def] END",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression for which comparison is defined.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "optN",
                    "description": "An expression that has a least common type with expr and all other optN.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "resN",
                    "description": "Any expression that has a least common type with all other resN and def.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "def",
                    "description": "An optional expression that has a least common type with all resN.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "condN",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "cast",
            "description": "Casts the value expr to the target data type type. This operator is a synonym for :: (colon colon sign) operator",
            "syntax": "cast(sourceExpr AS targetType)",
            "arguments": [
                {
                    "name": "sourceExpr",
                    "description": "Any castable expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetType",
                    "description": "The data type of the result.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cbrt",
            "description": "Returns the cube root of expr.",
            "syntax": "cbrt(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ceil",
            "description": "Returns the smallest number not smaller than expr rounded up to targetScale digits relative to the decimal point. This function is a synonym of ceiling function.",
            "syntax": "ceil(expr [, targetScale])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetScale",
                    "description": "An optional INTEGER literal greater than -38 specifying by how many digits after the decimal points to round up.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "ceiling",
            "description": "Returns the smallest number not smaller than expr rounded up to targetScale digits relative to the decimal point. This function is a synonym of ceil function.",
            "syntax": "ceiling(expr [, targetScale])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetScale",
                    "description": "An optional INTEGER literal greater than -38 specifying to how many digits after the decimal points to round up.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "char",
            "description": "Returns the character at the supplied UTF-16 code point. This function is a synonym for chr function.",
            "syntax": "char(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "char_length",
            "description": "Returns the character length of string data or number of bytes of binary data. This function is a synonym for character_length function and length function.",
            "syntax": "char_length(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "character_length",
            "description": "Returns the character length of string data or number of bytes of binary data. This function is a synonym for char_length function and length function.",
            "syntax": "character_length(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "charindex",
            "description": "Returns the position of the first occurrence of substr in str after position pos. This function is a synonym for locate function.",
            "syntax": "charindex(substr, str [, pos])",
            "arguments": [
                {
                    "name": "substr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "chr",
            "description": "Returns the character at the supplied UTF-16 code point. This function is a synonym for char function.",
            "syntax": "chr(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cloud_files_state",
            "description": "Returns the file-level state of an Auto Loader or read_files stream.",
            "syntax": "cloud_files_state( { TABLE ( table_name ) | checkpoint } )",
            "arguments": [
                {
                    "name": "table_name",
                    "description": "The identifier of the streaming table that\u2019s being written to by read_files. The name must not include a temporal specification. Available in Databricks Runtime 13.3 LTS and above.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "checkpoint",
                    "description": "A STRING literal. The checkpoint directory for a stream using the Auto Loader source. See What is Auto Loader?.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "coalesce",
            "description": "Returns the first non-null argument.",
            "syntax": "coalesce(expr1 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "Any expression that shares a least common type across all exprN.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "collect_list",
            "description": "Returns an array consisting of all values in expr within the group. This function is a synonym for array_agg aggregate function.",
            "syntax": "collect_list ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "collect_set",
            "description": "Returns an array consisting of all unique values in expr within the group.",
            "syntax": "collect_set(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type except MAP.",
                    "type": "MAP.",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "coloncolonsign",
            "description": "Casts the value expr to the target data type type. This operator is a synonym for cast function.",
            "syntax": "expr :: type",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any castable expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "colonsign",
            "description": "Extracts content from a JSON string using a JSON path expression.",
            "syntax": "jsonStr : jsonPath",
            "arguments": [
                {
                    "name": "jsonStr",
                    "description": "A STRING expression with valid JSON.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "jsonPath",
                    "description": "A JSON path expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "concat",
            "description": "Returns the concatenation of the arguments. This function is a synonym for || (pipe pipe sign) operator.",
            "syntax": "concat(expr1, expr2 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "Expressions which are all STRING, all BINARY or all ARRAYs of STRING or BINARY.",
                    "type": "STRING,|BINARY|STRING|BINARY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "concat_ws",
            "description": "Returns the concatenation strings separated by sep.",
            "syntax": "concat_ws(sep [, expr1 [, ...] ])",
            "arguments": [
                {
                    "name": "sep",
                    "description": "An STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "exprN",
                    "description": "Each exprN can be either a STRING or an ARRAY of STRING.",
                    "type": "STRING|ARRAY|STRING.",
                    "optional": false
                }
            ]
        },
        {
            "name": "contains",
            "description": "Returns true if expr contains subExpr.",
            "syntax": "contains(expr, subExpr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY within which to search.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "subExpr",
                    "description": "The STRING or BINARY to search for.",
                    "type": "STRING|BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "conv",
            "description": "Converts num from fromBase to toBase.",
            "syntax": "conv(num, fromBase, toBase)",
            "arguments": [
                {
                    "name": "num",
                    "description": "An STRING expression expressing a number in fromBase.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fromBase",
                    "description": "An INTEGER expression denoting the source base.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "toBase",
                    "description": "An INTEGER expression denoting the target base.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "convert_timezone",
            "description": "Converts TIMESTAMP_NTZ to another time zone.\nThe input column is converted to TIMESTAMP_NTZ type before the time zone conversion, if the input column is of TIMESTAMP or DATE or STRING type.",
            "syntax": "convert_timezone([sourceTz, ]targetTz, sourceTs)",
            "arguments": [
                {
                    "name": "sourceTz",
                    "description": "An expression that returns a numeric or an interval value. If absent, the current session time zone is used as the source time zone.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetTz",
                    "description": "The time zone to which the input timestamp should be converted.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "sourceTs",
                    "description": "The TIMESTAMP_NTZ to convert.",
                    "type": "TIMESTAMP_NTZ",
                    "optional": false
                }
            ]
        },
        {
            "name": "corr",
            "description": "Returns Pearson coefficient of correlation between a group of number pairs.",
            "syntax": "corr ( [ALL | DISTINCT] expr1, expr2 ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "cos",
            "description": "Returns the cosine of expr.",
            "syntax": "cos(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the angle in radians.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cosh",
            "description": "Returns the hyperbolic cosine of expr.",
            "syntax": "cosh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cot",
            "description": "Returns the cotangent of expr.",
            "syntax": "cot(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "count",
            "description": "Returns the number of retrieved rows in a group.",
            "syntax": "count ( [DISTINCT | ALL] * ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "*",
                    "description": "Counts all rows in the group.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "Counts all rows for which all exprN are not NULL.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "count_if",
            "description": "Returns the number of true values for the group in expr.",
            "syntax": "count_if ( [ALL | DISTINCT] expr ) [ FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "count_min_sketch",
            "description": "Returns a count-min sketch of all values in the group in column with the epsilon, confidence and seed.",
            "syntax": "count_min_sketch ( [ALL | DISTINCT] column, epsilon, confidence, seed ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "column",
                    "description": "An expression that evaluates to an integral numeric, STRING, or BINARY.",
                    "type": "STRING,|BINARY.",
                    "optional": false
                },
                {
                    "name": "epsilon",
                    "description": "A DOUBLE literal greater than 0 describing the relative error.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "confidence",
                    "description": "A DOUBLE literal greater than 0 and less than 1.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "seed",
                    "description": "An INTEGER literal.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "covar_pop",
            "description": "Returns the population covariance of number pairs in a group.",
            "syntax": "covar_pop ( [ALL | DISTINCT] expr1, expr2 ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "covar_samp",
            "description": "Returns the sample covariance of number pairs in a group.",
            "syntax": "covar_samp ( [ALL | DISTINCT] expr1, expr2 ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "crc32",
            "description": "Returns a cyclic redundancy check value of expr.",
            "syntax": "crc32(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression.",
                    "type": "BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "csc",
            "description": "Returns the cosecant of expr.",
            "syntax": "csc(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the angle in radians.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cube",
            "description": "Creates a multi-dimensional cube using the specified expression columns.",
            "syntax": "cube (expr1 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "Any expression that can be grouped.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "cume_dist",
            "description": "Returns the position of a value relative to all values in the partition.",
            "syntax": "cume_dist() over_clause",
            "arguments": [
                {
                    "name": "over_clause",
                    "description": "The clause describing the windowing. See",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "curdate",
            "description": "Returns the current date at the start of query evaluation. This function is a synonym for current_date.",
            "syntax": "curdate()",
            "arguments": null
        },
        {
            "name": "current_catalog",
            "description": "Returns the current catalog.",
            "syntax": "current_catalog()",
            "arguments": null
        },
        {
            "name": "current_database",
            "description": "Returns the current schema. This function is an alias for current_schema function.",
            "syntax": "current_database()",
            "arguments": null
        },
        {
            "name": "current_date",
            "description": "Returns the current date at the start of query evaluation.",
            "syntax": "current_date()",
            "arguments": null
        },
        {
            "name": "current_metastore",
            "description": "Returns the current metastore id.",
            "syntax": "current_metastore()",
            "arguments": null
        },
        {
            "name": "current_recipient",
            "description": "Preview",
            "syntax": "current_recipient(key)",
            "arguments": null
        },
        {
            "name": "current_schema",
            "description": "Returns the current schema.",
            "syntax": "current_schema()",
            "arguments": null
        },
        {
            "name": "current_timestamp",
            "description": "Returns the current timestamp at the start of query evaluation.",
            "syntax": "current_timestamp()",
            "arguments": null
        },
        {
            "name": "current_timezone",
            "description": "Returns the current session local timezone.",
            "syntax": "current_timezone()",
            "arguments": null
        },
        {
            "name": "current_user",
            "description": "Returns the user executing the statement. current_user is an alias for user.",
            "syntax": "current_user()",
            "arguments": null
        },
        {
            "name": "current_version",
            "description": "Returns the current version of Databricks SQL or Databricks Runtime.",
            "syntax": "current_version()",
            "arguments": [
                {
                    "name": "dbr_version",
                    "description": "A NULL STRING in Databricks SQL.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "dbsql_version",
                    "description": "A STRING with the current version of Databricks SQL.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "u_build_hash",
                    "description": "A STRING used by Databricks support.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "r_build_hash",
                    "description": "A STRING used by Databricks support.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "date",
            "description": "This function is a synonym for CAST(expr AS expr). See cast function for details.",
            "syntax": "date(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that can be cast to DATE.",
                    "type": "DATE.",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_add",
            "description": "Returns the date numDays after startDate.",
            "syntax": "date_add(startDate, numDays)",
            "arguments": [
                {
                    "name": "startDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "numDays",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_add3",
            "description": "Adds value and unit to a timestamp expr. This function is a synonym for timestampadd function.",
            "syntax": "date_add(unit, value, expr)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY | DAYOFYEAR |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "value",
                    "description": "A numeric expression with the number of units to add to expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_diff",
            "description": "Returns the difference between two timestamps measured in units. date_diff (timestamp) is a synonym for timestampdiff function.",
            "syntax": "date_diff(unit, start, end)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "A starting TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "end",
                    "description": "A ending TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_format",
            "description": "Converts a timestamp to a string in the format fmt.",
            "syntax": "date_format(expr, fmt)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE, TIMESTAMP, or a STRING in a valid datetime format.",
                    "type": "DATE,|TIMESTAMP,|STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING expression describing the desired format.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_from_unix_date",
            "description": "Creates a date from the number of days since 1970-01-01. This function is a synonym for date_add(DATE'1970-01-01', days).",
            "syntax": "date_from_unix_date(days)",
            "arguments": [
                {
                    "name": "days",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_part",
            "description": "Extracts a part of the date, timestamp, or interval.",
            "syntax": "date_part(fieldStr, expr)",
            "arguments": [
                {
                    "name": "fieldStr",
                    "description": "An STRING literal.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "A DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_sub",
            "description": "Returns the date numDays before startDate.",
            "syntax": "date_sub(startDate, numDays)",
            "arguments": [
                {
                    "name": "startDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "numDays",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "date_trunc",
            "description": "Returns timestamp truncated to the unit specified in unit.",
            "syntax": "date_trunc(unit, expr)",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A STRING literal.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "A DATE, TIMESTAMP, or STRING with a valid timestamp format.",
                    "type": "DATE,|TIMESTAMP,|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "dateadd",
            "description": "Adds value units to a timestamp expr. This function is a synonym for timestampadd function.",
            "syntax": "dateadd(unit, value, expr)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY | DAYOFYEAR |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "value",
                    "description": "A numeric expression with the number of units to add to expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "dateadd2",
            "description": "Returns the date numDays after startDate. This function is a synonym for date_add (days) function.",
            "syntax": "dateadd(startDate, numDays)",
            "arguments": [
                {
                    "name": "startDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "numDays",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "datediff",
            "description": "Returns the number of days from startDate to endDate.",
            "syntax": "datediff(endDate, startDate)",
            "arguments": [
                {
                    "name": "endDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "startDate",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                }
            ]
        },
        {
            "name": "datediff3",
            "description": "Returns the difference between two timestamps measured in units. This function is a synonym for timestampdiff function.",
            "syntax": "datediff(unit, start, end)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "A starting TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "end",
                    "description": "An ending TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "day",
            "description": "Returns the day of month of the date or timestamp. This function is a synonym for extract(DAY FROM expr).",
            "syntax": "day(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "dayofmonth",
            "description": "Returns the day of month of the date or timestamp. This function is a synonym for extract(DAY FROM expr).",
            "syntax": "dayofmonth(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "dayofweek",
            "description": "Returns the day of week of the date or timestamp. This function is a synonym for extract(DAYOFWEEK FROM expr).",
            "syntax": "dayofweek(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "dayofyear",
            "description": "Returns the day of year of the date or timestamp. This function is a synonym for extract(DAY FORM expr).",
            "syntax": "dayofyear(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "decimal",
            "description": "Casts the value expr to DECIMAL. This function is a synonym for CAST(expr AS decimal(10, 0)). See cast function for details.",
            "syntax": "decimal(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that can be cast to DECIMAL.",
                    "type": "DECIMAL.",
                    "optional": false
                }
            ]
        },
        {
            "name": "decode",
            "description": "Returns the value matching the key.",
            "syntax": "decode(expr, { key1, value1 } [, ...] [, defValue])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression of a comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "keyN",
                    "description": "An expression that matched the type of expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "valueN",
                    "description": "An expression that shares a least common type with defValue and the other valueNs.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "defValue",
                    "description": "An optional expression that shares a least common type with valueN.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "decode_cs",
            "description": "Translates binary expr to a string using the character set encoding charSet.",
            "syntax": "decode(expr, charSet)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression encoded in charset.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "charSet",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "degrees",
            "description": "Converts radians to degrees.",
            "syntax": "degrees(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "dense_rank",
            "description": "Returns the rank of a value compared to all values in the partition.",
            "syntax": "dense_rank()",
            "arguments": null
        },
        {
            "name": "div",
            "description": "Returns the integral part of the division of divisor by dividend.",
            "syntax": "divisor div dividend",
            "arguments": [
                {
                    "name": "divisor",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "dividend",
                    "description": "A matching interval type if divisor is an interval, a numeric otherwise.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "dotsign",
            "description": "Returns a fieldIdentifier value in an STRUCT or a value by keyIdentifier in a MAP.",
            "syntax": "structExpr . fieldIdentifier\n\nmapExpr . keyIdentifier",
            "arguments": [
                {
                    "name": "structExpr",
                    "description": "A STRUCT expression.",
                    "type": "STRUCT",
                    "optional": false
                },
                {
                    "name": "fieldIdentifier",
                    "description": "An identifier for field within structExpr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "mapExpr",
                    "description": "A MAP expression with keys of type STRING.",
                    "type": "MAP|STRING.",
                    "optional": false
                },
                {
                    "name": "keyIdentifier",
                    "description": "An identifier matching a key value in the mapExpr.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "double",
            "description": "Casts the value expr to DOUBLE. This function is a synonym for CAST(expr AS DOUBLE). See cast function for details.",
            "syntax": "double(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that can be cast to DOUBLE.",
                    "type": "DOUBLE.",
                    "optional": false
                }
            ]
        },
        {
            "name": "e",
            "description": "Returns the constant e.",
            "syntax": "e()",
            "arguments": null
        },
        {
            "name": "element_at",
            "description": "Returns the element of an arrayExpr at index.",
            "syntax": "element_at(arrayExpr, index)",
            "arguments": [
                {
                    "name": "arrayExpr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "index",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "mapExpr",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "An expression matching the type of the keys of mapExpr",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "elt",
            "description": "Returns the nth expression.",
            "syntax": "elt(index, expr1 [, ...])",
            "arguments": [
                {
                    "name": "index",
                    "description": "An INTEGER expression greater than 0.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "exprN",
                    "description": "Any expression that shares a least common type with all exprN.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "encode",
            "description": "Returns the binary representation of a string using the charSet character encoding.",
            "syntax": "encode(expr, charSet)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression to be encoded.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "charSet",
                    "description": "A STRING expression specifying the encoding.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "endswith",
            "description": "The function operates in BINARY mode if both arguments are BINARY. Returns true if expr ends with endExpr.",
            "syntax": "endswith(expr, endExpr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "endExpr",
                    "description": "A STRING or BINARY expression which is compared to the end of str.",
                    "type": "STRING|BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "eqeqsign",
            "description": "Returns true if expr1 equals expr2, or false otherwise. This function is a synonym for = (eq sign) operator. Use equal_null to treat NULL as a comparable value.",
            "syntax": "expr1 == expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "eqsign",
            "description": "Returns true if expr1 equals expr2, or false otherwise. This function is a synonym for == (eq eq sign) operator.",
            "syntax": "expr1 = expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "equal_null",
            "description": "Returns true if expr1 equals expr2 or both expressions are NULL, or false otherwise. This function differs from = (eq sign) operator, by treating NULL as a comparable value.",
            "syntax": "equal_null ( expr1, expr2 )",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "event_log",
            "description": "Returns the event log for materialized views, streaming tables, and DLT pipelines.",
            "syntax": "event_log( { TABLE ( table_name ) | pipeline_id } )",
            "arguments": [
                {
                    "name": "table_name",
                    "description": "The name of a materialized view or streaming table. The name must not include a temporal specification. If the name is not qualified, the current catalog and schema are used to qualify the identifier.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "pipeline_id",
                    "description": "The string identifier of a Delta Live Tables pipeline.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "every",
            "description": "Returns true if all values of expr in the group are true. This function is a synonym for bool_and aggregate function.",
            "syntax": "every(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "exists",
            "description": "Returns true if func is true for any element in expr or query returns at least one row.",
            "syntax": "exists(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "query",
                    "description": "Any Query.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "exp",
            "description": "Returns e to the power of expr.",
            "syntax": "exp(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "explode",
            "description": "Returns a set of rows by un-nesting collection.",
            "syntax": "explode(collection)",
            "arguments": [
                {
                    "name": "collection",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "explode_outer",
            "description": "Returns a set of rows by un-nesting collection using outer semantics.",
            "syntax": "explode_outer(collection)",
            "arguments": [
                {
                    "name": "collection",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "expm1",
            "description": "Returns exp(expr) - 1.",
            "syntax": "expm1(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "extract",
            "description": "Returns field of source.",
            "syntax": "extract(field FROM source)",
            "arguments": [
                {
                    "name": "field",
                    "description": "A keyword that selects which part of source should be extracted.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "source",
                    "description": "A DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "factorial",
            "description": "Returns the factorial of expr.",
            "syntax": "factorial(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An INTEGER expression between 0 and 20 inclusive.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "filter",
            "description": "Filters the array in expr using the function func.",
            "syntax": "filter(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "find_in_set",
            "description": "Returns the position of a string within a comma-separated list of strings.",
            "syntax": "find_in_set(searchExpr, sourceExpr)",
            "arguments": [
                {
                    "name": "searchExpr",
                    "description": "A STRING expression specifying the \u201cword\u201d to be searched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "sourceExpr",
                    "description": "A STRING expression with commas separating \u201cwords\u201d.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "first",
            "description": "Returns the first value of expr for a group of rows. This function is a synonym for first_value aggregate function.",
            "syntax": "first(expr[, ignoreNull]) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ignoreNull",
                    "description": "An optional BOOLEAN literal defaulting to false.",
                    "type": "BOOLEAN",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used or ignoreNull is true any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "first_value",
            "description": "Returns the first value of expr for a group of rows. This function is a synonym for first aggregate function.",
            "syntax": "first_value(expr[, ignoreNull]) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ignoreNull",
                    "description": "An optional BOOLEAN literal defaulting to false.",
                    "type": "BOOLEAN",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used or ignoreNull is true any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "flatten",
            "description": "Transforms an array of arrays into a single array.",
            "syntax": "flatten(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY of ARRAY expression.",
                    "type": "ARRAY|ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "float",
            "description": "Casts the value expr to FLOAT. This function is a synonym for CAST(expr AS FLOAT). See cast function for details.",
            "syntax": "float(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that can be cast to FLOAT.",
                    "type": "FLOAT.",
                    "optional": false
                }
            ]
        },
        {
            "name": "floor",
            "description": "Returns the largest number not bigger than expr rounded down to targetScale digits relative to the decimal point.",
            "syntax": "floor(expr [, targetScale])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetScale",
                    "description": "An optional INTEGER literal greater than -38 specifying by how many digits after the decimal points to round down.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "forall",
            "description": "Tests whether func holds for all elements in the array.",
            "syntax": "forall(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function returning a BOOLEAN.",
                    "type": "BOOLEAN.",
                    "optional": false
                }
            ]
        },
        {
            "name": "format_number",
            "description": "Formats expr like #,###,###.##, rounded to scale decimal places.",
            "syntax": "format_number(expr, scale)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "scale",
                    "description": "An INTEGER expression greater or equal to 0.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING expression specifying a format.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "format_string",
            "description": "Returns a formatted string from printf-style format strings.",
            "syntax": "format_string(strfmt [, obj1 [, ...] ])",
            "arguments": [
                {
                    "name": "strfmt",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "objN",
                    "description": "STRING or numeric expressions.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "from_csv",
            "description": "Returns a struct value with the csvStr and schema.",
            "syntax": "from_csv(csvStr, schema [, options])",
            "arguments": [
                {
                    "name": "csvStr",
                    "description": "A STRING expression specifying a row of CSV data.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "schema",
                    "description": "A STRING literal or invocation of schema_of_csv function.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP<STRING,STRING> literal specifying directives.",
                    "type": "MAP<STRING,STRING>",
                    "optional": true
                }
            ]
        },
        {
            "name": "from_json",
            "description": "Returns a struct value with the jsonStr and schema.",
            "syntax": "from_json(jsonStr, schema [, options])",
            "arguments": [
                {
                    "name": "jsonStr",
                    "description": "A STRING expression specifying a json document.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "schema",
                    "description": "A STRING expression or invocation of schema_of_json function.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP<STRING,STRING> literal specifying directives.",
                    "type": "MAP<STRING,STRING>",
                    "optional": true
                }
            ]
        },
        {
            "name": "from_unixtime",
            "description": "Returns unixTime in fmt.",
            "syntax": "from_unixtime(unixTime [, fmt])",
            "arguments": [
                {
                    "name": "unixTime",
                    "description": "A BIGINT expression representing seconds elapsed since 1969-12-31 at 16",
                    "type": "BIGINT",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "An optional STRING expression with a valid format.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "from_utc_timestamp",
            "description": "Returns a timestamp in expr specified in UTC in the timezone timeZone.",
            "syntax": "from_utc_timestamp(expr, timeZone)",
            "arguments": [
                {
                    "name": "expr ",
                    "description": "A TIMESTAMP expression with a UTC timestamp.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "timeZone",
                    "description": "A STRING expression that is a valid timezone.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "from_xml",
            "description": "Preview",
            "syntax": "from_xml(xmlStr, schema [, options])",
            "arguments": [
                {
                    "name": "xmlStr",
                    "description": "A STRING expression specifying a single XML record",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "schema",
                    "description": "A STRING expression or invocation of schema_of_xml function.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP<STRING,STRING> literal specifying directives.",
                    "type": "MAP<STRING,STRING>",
                    "optional": true
                }
            ]
        },
        {
            "name": "get",
            "description": "arrayExpr: An ARRAY expression.",
            "syntax": "get(arrayExpr, index)",
            "arguments": [
                {
                    "name": "arrayExpr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "index",
                    "description": "An INTEGER expression specifying the index in the array.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "get_json_object",
            "description": "Extracts a JSON object from path.",
            "syntax": "get_json_object(expr, path)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression containing well formed JSON.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "path",
                    "description": "A STRING literal with a well formed JSON path.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "getbit",
            "description": "Returns the value of a bit in a binary representation of an integral numeric. This function is a synonym of bit_get function.",
            "syntax": "getbit(expr, pos))",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to an integral numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An expression of type INTEGER.",
                    "type": "INTEGER.",
                    "optional": false
                }
            ]
        },
        {
            "name": "getdate",
            "description": "Returns the current timestamp at the start of query evaluation.",
            "syntax": "getdate()",
            "arguments": null
        },
        {
            "name": "greatest",
            "description": "Returns the greatest value of all arguments, skipping null values.",
            "syntax": "greatest(expr1, expr2 [, ...])",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "Any expression of a comparable type with a shared least common type across all exprN.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "grouping",
            "description": "Indicates whether a specified column in a GROUPING SET, ROLLUP, or CUBE represents a subtotal.",
            "syntax": "grouping(col)",
            "arguments": [
                {
                    "name": "col",
                    "description": "A column reference identified in a GROUPING SET, ROLLUP, or CUBE.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "grouping_id",
            "description": "Returns the level of grouping for a set of columns.",
            "syntax": "grouping_id( [col1 [, ...] ] )",
            "arguments": [
                {
                    "name": "colN",
                    "description": "A column reference identified in a GROUPING SET, ROLLUP, or CUBE.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "gteqsign",
            "description": "Returns true if expr1 is greater than or equal to expr2, or false otherwise.",
            "syntax": "expr1 >= expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "gtsign",
            "description": "Returns true if expr1 is greater than expr2, or false otherwise.",
            "syntax": "expr1 > expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_boundaryasgeojson",
            "description": "Returns the polygonal boundary of the input H3 cell in GeoJSON format.",
            "syntax": "h3_boundaryasgeojson ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_boundaryaswkb",
            "description": "Returns the polygonal boundary of the input H3 cell in WKB format.",
            "syntax": "h3_boundaryaswkb ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_boundaryaswkt",
            "description": "Returns the polygonal boundary of the input H3 cell in WKT format.",
            "syntax": "h3_boundaryaswkt ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_centerasgeojson",
            "description": "Returns the center of the input H3 cell as a point in GeoJSON format.",
            "syntax": "h3_centerasgeojson ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_centeraswkb",
            "description": "Returns the center of the input H3 cell as a point in WKB format.",
            "syntax": "h3_centeraswkb ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_centeraswkt",
            "description": "Returns the center of the input H3 cell as a point in WKT format.",
            "syntax": "h3_centeraswkt ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_compact",
            "description": "Compacts the input set of H3 cells. The compacted set covers the same set of H3 cells as the original one.",
            "syntax": "h3_compact ( h3CellIdsExpr )",
            "arguments": [
                {
                    "name": "h3CellIdsExpr",
                    "description": "An ARRAY of BIGINTs expression, or an ARRAY of hexadecimal STRINGs expression representing an array of H3 cell IDs.",
                    "type": "ARRAY|ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_coverash3",
            "description": "Returns an ARRAY of BIGINT values representing H3 cell IDs. These values correspond to the minimal set of hexagons or pentagons, of the specified resolution that fully cover the input linear or areal geography.",
            "syntax": "h3_coverash3 ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing a linear (linestring or multilinestring) or areal (polygon or multipolygon) geography in WKB, WKT, or GeoJSON. The geography must have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, with a value between 0 and 15 inclusive, specifying the resolution for the H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_coverash3string",
            "description": "Returns an ARRAY of STRING values representing H3 cell IDs. These values correspond to the minimal set of hexagons or pentagons, of the specified resolution that fully cover the input linear or areal geography.",
            "syntax": "h3_coverash3 ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing a linear (linestring or multilinestring) or areal (polygon or multipolygon) geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, with a value between 0 and 15 inclusive, specifying the resolution for the H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_distance",
            "description": "Returns the grid distance of the two input H3 cell IDs.",
            "syntax": "h3_distance ( h3CellId1Expr, h3CellId2Expr )",
            "arguments": [
                {
                    "name": "h3CellId1Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "h3CellId2Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_h3tostring",
            "description": "Converts the input H3 cell ID to its equivalent hexadecimal string representation.",
            "syntax": "h3_h3tostring ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression representing an H3 cell ID.",
                    "type": "BIGINT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_hexring",
            "description": "Returns an array of H3 cells that form a hollow hexagonal ring centered at the origin H3 cell and that are at grid distance k from the origin H3 cell.",
            "syntax": "h3_hexring ( h3CellIdExpr, kExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "kExpr",
                    "description": "An INTEGER expression representing the grid distance. kExpr must be non-negative.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_ischildof",
            "description": "Returns true if the first H3 cell is the same as or a child of the second H3 cell.",
            "syntax": "h3_ischildof ( h3CellId1Expr, h3cellId2Expr )",
            "arguments": [
                {
                    "name": "h3CellId1Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "h3CellId2Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_ispentagon",
            "description": "Returns true if the input BIGINT or hexadecimal STRING corresponds to a pentagonal H3 cell or not.",
            "syntax": "h3_ispentagon ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_isvalid",
            "description": "Returns true if the input BIGINT or STRING is a valid H3 cell ID.",
            "syntax": "h3_isvalid ( expr )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT expression, or a STRING expression.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_kring",
            "description": "Returns the H3 cells that are within (grid) distance k of the origin cell. The set of these H3 cells is called the k-ring of the origin cell.",
            "syntax": "h3_kring ( h3CellIdExpr, kExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "kExpr",
                    "description": "An INTEGER expression representing the grid distance. kExpr must be non-negative.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_kringdistances",
            "description": "Returns all H3 cells (represented as long integers or strings) within grid distance k from the origin H3 cell, along with their distance from the origin H3 cell.",
            "syntax": "h3_kringdistances ( h3CellIdExpr, kExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "kExpr",
                    "description": "An INTEGER expression representing the grid distance. kExpr must be non-negative.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_longlatash3",
            "description": "Returns the H3 cell ID (as a BIGINT) corresponding to the provided longitude and latitude at the specified resolution.",
            "syntax": "h3_longlatash3 ( longitudeExpr, latitudeExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "longitudeExpr",
                    "description": "A DOUBLE expression representing the longitude (in degrees) of the location whose H3 cell ID we want to compute.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "latitudeExpr",
                    "description": "A DOUBLE expression representing the latitude (in degrees) of the location whose H3 cell ID we want to compute.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_longlatash3string",
            "description": "Returns the H3 cell ID (as a hexadecimal STRING) corresponding to the provided longitude and latitude at the specified resolution.",
            "syntax": "h3_longlatash3string ( longitudeExpr, latitudeExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "longitudeExpr",
                    "description": "A DOUBLE expression representing the longitude (in degrees) of the location whose H3 cell ID we want to compute.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "latitudeExpr",
                    "description": "A DOUBLE expression representing the latitude (in degrees) of the location whose H3 cell ID we want to compute.",
                    "type": "DOUBLE",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_maxchild",
            "description": "h3CellIdExpr: A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
            "syntax": "h3_maxchild ( h3cellIdExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr ",
                    "description": "An INT expression, whose value is expected to be between h3_resolution(h3CellIdExpr) and 15 inclusive, specifying the resolution of the child H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_minchild",
            "description": "h3CellIdExpr: A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
            "syntax": "h3_minchild ( h3cellIdExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr ",
                    "description": "An INT expression, whose value is expected to be between h3_resolution(h3CellIdExpr) and 15 inclusive, specifying the resolution of the child H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_pointash3",
            "description": "geographyExpr: A BINARY or STRING expression representing a point geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
            "syntax": "h3_pointash3 ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing a point geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_pointash3string",
            "description": "geographyExpr: A BINARY or STRING expression representing a point geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
            "syntax": "h3_pointash3string ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing a point geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_polyfillash3",
            "description": "Returns an ARRAY of H3 cell IDs (represented as BIGINT) corresponding to hexagons or pentagons, of the specified resolution, that are contained by the input areal geography.",
            "syntax": "h3_polyfillash3 ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing an areal geography (polygon or multipolygon) in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_polyfillash3string",
            "description": "Returns an ARRAY of H3 cell IDs (represented as STRING) corresponding to hexagons or pentagons, of the specified resolution, that are contained by the input areal geography.",
            "syntax": "h3_polyfillash3string ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing an areal geography (polygon or multipolygon) in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_resolution",
            "description": "Returns the resolution of the input H3 cell.",
            "syntax": "h3_resolution ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_stringtoh3",
            "description": "Converts the input string, which is expected to be a hexadecimal string representing an H3 cell, to the corresponding BIGINT representation of the H3 cell.",
            "syntax": "h3_stringtoh3 ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdStringExpr",
                    "description": "A well-formed hexadecimal STRING expression representing a valid H3 cell ID.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_tessellateaswkb",
            "description": "Returns a tessellation of the input geography using H3 cells at the specified resolution. The tessellation is represented by an ARRAY of structs, each representing an element of the tessellation. Each element of the tessellation consists of a H3 cell ID (represented as a long integer), a Boolean value indicating whether the input geography fully covers the cell, and a BINARY value corresponding to the WKB description of the intersection of the input geography with the H3 cell.",
            "syntax": "h3_tessellateaswkb ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing a geography in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, with a value between 0 and 15 inclusive, specifying the resolution for the H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_tochildren",
            "description": "Returns an array of the children H3 cells of the input H3 cell at the specified resolution.",
            "syntax": "h3_tochildren ( h3cellIdExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression,  whose value is expected to be between h3_resolution(h3CellIdExpr) and 15 inclusive, specifying the resolution of the children H3 cell IDs.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_toparent",
            "description": "Returns the parent H3 cell of the input H3 cell at the specified resolution.",
            "syntax": "h3_toparent ( h3cellIdExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr ",
                    "description": "An INT expression, whose value is expected to be between 0 and h3_resolution(h3CellIdExpr) inclusive, specifying the resolution of the parent H3 cell ID.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_try_distance",
            "description": "This function behaves similarly to h3_distance, except that NULL is returned instead of an error if the grid distance between the two input H3 cell IDs of the same resolution is undefined. Specifically, it returns the grid distance of the two input H3 cell IDs, which are expected to be of the same resolution, or NULL if the distance is undefined.",
            "syntax": "h3_try_distance ( h3CellId1Expr, h3CellId2Expr )",
            "arguments": [
                {
                    "name": "h3CellId1Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                },
                {
                    "name": "h3CellId2Expr",
                    "description": "A BIGINT expression, or a hexadecimal STRING expression representing an H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_try_polyfillash3",
            "description": "Behaves the same as h3_polyfillash3, except that NULL is returned instead of an error if the first argument is invalid. More precisely, returns an ARRAY of H3 cell IDs (represented as BIGINT) corresponding to hexagons or pentagons, of the specified resolution, that are contained by the input areal geography.",
            "syntax": "h3_try_polyfillash3 ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing an areal geography (polygon or multipolygon) in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cells.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_try_polyfillash3string",
            "description": "Behaves the same as h3_polyfillash3string, except that NULL is returned instead of an error if the first argument is invalid. More precisely, returns an ARRAY of H3 cell IDs (represented as STRING) corresponding to hexagons or pentagons, of the specified resolution, that are contained by the input areal geography.",
            "syntax": "h3_try_polyfillash3string ( geographyExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "geographyExpr",
                    "description": "A BINARY or STRING expression representing an areal geography (polygon or multipolygon) in WKB, WKT, or GeoJSON. The geography is expected to have longitude and latitude coordinates in degrees that refer to the WGS84 coordinate reference system.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INT expression, whose value is expected to be between 0 and 15 inclusive, specifying the resolution for the H3 cells.",
                    "type": "INT",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_try_validate",
            "description": "Returns the input value, that is of type BIGINT or STRING, if it corresponds to a valid H3 cell, or NULL otherwise. In the case of STRING input, any leading zeros are trimmed.",
            "syntax": "h3_try_validate ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a STRING expression that is expected to represent a valid H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_uncompact",
            "description": "Uncompacts the input set of H3 cells to the specified resolution. The uncompacted set covers the same set of H3 cells as the original one using cells at the specified resolution.",
            "syntax": "h3_uncompact ( h3CellIdsExpr, resolutionExpr )",
            "arguments": [
                {
                    "name": "h3CellIdsExpr",
                    "description": "An ARRAY of BIGINTs expression, or an ARRAY of hexadecimal STRINGs expression representing an array of H3 cell IDs.",
                    "type": "ARRAY|ARRAY",
                    "optional": false
                },
                {
                    "name": "resolutionExpr",
                    "description": "An INTEGER expression, whose value is expected to be between the maximum resolution of the input H3 cells and 15 inclusive, specifying the resolution of the H3 cell IDs in the output ARRAY.",
                    "type": "INTEGER|ARRAY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "h3_validate",
            "description": "Returns the input value, that is of type BIGINT or STRING, if it corresponds to a valid H3 cell ID, or emits an error otherwise. In the case of STRING input, any leading zeros are trimmed.",
            "syntax": "h3_validate ( h3CellIdExpr )",
            "arguments": [
                {
                    "name": "h3CellIdExpr",
                    "description": "A BIGINT expression, or a STRING expression that is expected to represent a valid H3 cell ID.",
                    "type": "BIGINT|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "hash",
            "description": "Returns a hash value of the arguments.",
            "syntax": "hash(expr1, ...)",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "hex",
            "description": "Converts expr to hexadecimal.",
            "syntax": "hex(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BIGINT, BINARY, or STRING expression.",
                    "type": "BIGINT,|BINARY,|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "histogram_numeric",
            "description": "Computes a histogram on expr using numBins bins.",
            "syntax": "histogram_numeric ( [ALL | DISTINCT ] expr, numBins ) [ FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric, TIMESTAMP, DATE, or INTERVAL expression that the function consumes and computes the histogram on.",
                    "type": "TIMESTAMP,|DATE,|INTERVAL",
                    "optional": false
                },
                {
                    "name": "numBins",
                    "description": "An INTEGER literal that must be greater than 1, specifying the number of bins for the histogram computation.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional BOOLEAN expression that filters the rows for aggregation.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "hll_sketch_agg",
            "description": "This function utilizes the HyperLogLog algorithm to count a probabilistic approximation of the number of unique values in a given column, and outputs the result as a binary representation known as a sketch buffer.\nThis binary representation is suitable for persistence.",
            "syntax": "hll_sketch_agg ( expr [, lgConfigK ] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of type INT, BIGINT, STRING, or BINARY against which unique counting will occur.",
                    "type": "INT,|BIGINT,|STRING,|BINARY",
                    "optional": false
                },
                {
                    "name": "lgConfigK",
                    "description": "An optional INT constant between 4 and 21 inclusive with default 12. The log-base-2 of K, where K is the number of buckets or slots for the sketch.",
                    "type": "INT",
                    "optional": true
                }
            ]
        },
        {
            "name": "hll_sketch_estimate",
            "description": "This function utilizes the HyperLogLog algorithm to count a probabilistic approximation of the number of unique values in a given column,\nconsuming a binary representation known as a sketch buffer previously generated by the hll_sketch_agg function and returning the result as a big integer.",
            "syntax": "hll_sketch_estimate ( expr )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression holding a sketch generated by hll_sketch_agg.",
                    "type": "BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "hll_union",
            "description": "This function utilizes the HyperLogLog algorithm to combine two sketches into a single sketch.",
            "syntax": "hll_union ( expr1, expr2 [, allowDifferentLgConfigK ] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "A BINARY expression holding a sketch generated by hll_sketch_agg.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "allowDifferentLgConfigK",
                    "description": "A optional BOOLEAN expression controlling whether to allow merging two sketches with different lgConfigK values. The default value is false.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "hll_union_agg",
            "description": "This function utilizes the HyperLogLog algorithm to combine a group of sketches into a single one.",
            "syntax": "hll_union_agg ( expr [, allowDifferentLgConfigK ] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY expression holding a sketch generated by hll_sketch_agg.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "allowDifferentLgConfigK",
                    "description": "A optional BOOLEAN constant expression controlling whether to allow merging sketches with different lgConfigK values. The default value is false.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "hour",
            "description": "Returns the hour component of a timestamp. This function is a synonym for extract(HOUR FROM expr).",
            "syntax": "hour(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "hypot",
            "description": "Returns sqrt(expr1 * expr1 + expr2 * expr2).",
            "syntax": "hypot(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "if",
            "description": "Returns expr1 if cond is true, or expr2 otherwise. This function is a synonym for iff function.",
            "syntax": "if(cond, expr1, expr2)",
            "arguments": [
                {
                    "name": "cond",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "iff",
            "description": "Returns expr1 if cond is true, or expr2 otherwise. This function is a synonym for if function.",
            "syntax": "iff(cond, expr1, expr2)",
            "arguments": [
                {
                    "name": "cond",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ifnull",
            "description": "Returns expr2 if expr1 is NULL, or expr1 otherwise. This function is a synonym for `coalesce(expr1, expr2)` with two arguments.",
            "syntax": "ifnull(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ilike",
            "description": "Returns true if str matches pattern with escape case-insensitively.",
            "syntax": "str [ NOT ] ilike ( pattern [ ESCAPE escape ] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pattern",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "escape",
                    "description": "A single character STRING literal.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "ANY or SOME or ALL",
                    "description": "If ALL is specified then ilike returns true if str matches all patterns, otherwise returns true if it matches at least one pattern.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "in",
            "description": null,
            "syntax": "elem in ( expr1 [, ...] )",
            "arguments": [
                {
                    "name": "elem",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "exprN",
                    "description": "An expression of any type sharing a least common type with all other arguments.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "query",
                    "description": "Any query. The result must share a least common type with elem. If the query returns more than one column elem must be an tuple (STRUCT) with the same number of field",
                    "type": "(STRUCT)",
                    "optional": false
                }
            ]
        },
        {
            "name": "initcap",
            "description": "Returns expr with the first letter of each word in uppercase.",
            "syntax": "initcap(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "inline",
            "description": "Explodes an array of structs into a table.",
            "syntax": "inline(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY<STRUCT> expression.",
                    "type": "ARRAY<STRUCT>",
                    "optional": false
                }
            ]
        },
        {
            "name": "inline_outer",
            "description": "Explodes an array of structs into a table with OUTER semantics.",
            "syntax": "inline_outer(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY < STRUCT > expression.",
                    "type": "ARRAY|STRUCT",
                    "optional": false
                }
            ]
        },
        {
            "name": "input_file_block_length",
            "description": "Returns the length in bytes of the block being read.",
            "syntax": "input_file_block_length()",
            "arguments": null
        },
        {
            "name": "input_file_block_start",
            "description": "Returns the start offset in bytes of the block being read.",
            "syntax": "input_file_block_start()",
            "arguments": null
        },
        {
            "name": "input_file_name",
            "description": "Returns the name of the file being read, or empty string if not available.",
            "syntax": "input_file_name()",
            "arguments": null
        },
        {
            "name": "instr",
            "description": "Returns the (1-based) index of the first occurrence of substr in str.",
            "syntax": "instr(str, substr)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "substr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "int",
            "description": "Casts the value expr to INTEGER. This function is a synonym for CAST(expr AS INTEGER).",
            "syntax": "int(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression which is castable to INTEGER.",
                    "type": "INTEGER.",
                    "optional": false
                }
            ]
        },
        {
            "name": "is_account_group_member",
            "description": "Returns true if the  session (connected) user is a direct or indirect member of the specified group at the account level.",
            "syntax": "is_account_group_member(group)",
            "arguments": [
                {
                    "name": "group",
                    "description": "A STRING expression specifying a group.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "is_member",
            "description": "Returns true if the session (connected) user is a direct or indirect member of the specified group if the specified group is a workspace local group or an account level group assigned to the workspace.",
            "syntax": "is_member(group)",
            "arguments": [
                {
                    "name": "group",
                    "description": "A STRING expression specifying a group.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "isdistinct",
            "description": "Tests whether the arguments have different values where NULLs are considered as comparable values.",
            "syntax": "expr1 is [not] distinct from expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of a comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of a type sharing a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "isfalse",
            "description": "Tests whether expr is false.",
            "syntax": "expr is [not] false",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN or STRING expression.",
                    "type": "BOOLEAN|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "isnan",
            "description": "Returns true if expr is NaN.",
            "syntax": "isnan(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "isnotnull",
            "description": "Returns true if expr is not NULL. This function is a synonym for expr IS NOT NULL.",
            "syntax": "isnotnull(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "isnull",
            "description": "Returns true if expr is NULL. This function is a synonym for is null operator.",
            "syntax": "isnull(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "isnullop",
            "description": "Tests whether expr is NULL.",
            "syntax": "expr is [not] null",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "istrue",
            "description": "Tests whether expr is true.",
            "syntax": "expr is [not] true",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN or STRING expression.",
                    "type": "BOOLEAN|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "java_method",
            "description": "Calls a method with reflection.",
            "syntax": "java_method(class, method [, arg1 [, ...] ] )",
            "arguments": [
                {
                    "name": "class",
                    "description": "A STRING literal specifying the java class.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "method",
                    "description": "A STRING literal specifying the java method.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "argn",
                    "description": "An expression with a type appropriate for the selected method.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "json_array_length",
            "description": "Returns the number of elements in the outermost JSON array.",
            "syntax": "json_array_length(jsonArray)",
            "arguments": [
                {
                    "name": "jsonArray",
                    "description": "A JSON array.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "json_object_keys",
            "description": "Returns all the keys of the outermost JSON object as an array.",
            "syntax": "json_object_keys(jsonObject)",
            "arguments": [
                {
                    "name": "jsonObject",
                    "description": "A STRING expression of a valid JSON array format.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "json_tuple",
            "description": "Returns multiple JSON objects as a tuple.",
            "syntax": "json_tuple(jsonStr, path1 [, ...] )",
            "arguments": [
                {
                    "name": "jsonStr",
                    "description": "A STRING expression with well-formed JSON.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pathN",
                    "description": "A STRING literal with a JSON path.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "kurtosis",
            "description": "Returns the kurtosis value calculated from values of a group.",
            "syntax": "kurtosis ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "lag",
            "description": "Returns the value of expr from a preceding row within the partition.",
            "syntax": "lag( expr [, offset [, default] ] ) [ IGNORE NULLS | RESPECT NULLS ] OVER clause",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "offset",
                    "description": "An optional INTEGER literal specifying the offset.",
                    "type": "INTEGER",
                    "optional": true
                },
                {
                    "name": "default",
                    "description": "An expression of the same type as expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is specified, any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "OVER clause",
                    "description": "The clause describing the windowing. See",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "last",
            "description": "Returns the last value of expr for the group of rows. The function is a synonym for last_value aggregate function.",
            "syntax": "last(expr [, ignoreNull] ) [FILTER ( WHERE cond ) ] [ IGNORE NULLS | RESPECT NULLS ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ignoreNull",
                    "description": "An optional BOOLEAN literal defaulting to false.",
                    "type": "BOOLEAN",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used or ignoreNull is true any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "last_day",
            "description": "Returns the last day of the month that the date belongs to.",
            "syntax": "last_day(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                }
            ]
        },
        {
            "name": "last_value",
            "description": "Returns the last value of expr for the group of rows. The function is a synonym for last aggregate function.",
            "syntax": "last_value(expr [, ignoreNull] ) [FILTER ( WHERE cond ) ] [ IGNORE NULLS | RESPECT NULLS ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ignoreNull",
                    "description": "An optional BOOLEAN literal defaulting to false.",
                    "type": "BOOLEAN",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used or ignoreNull is true, any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "lcase",
            "description": "Returns expr with all characters changed to lowercase.",
            "syntax": "lcase(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "lead",
            "description": "Returns the value of expr from a subsequent row within the partition. This function is a synonym to lag(expr, -offset, default).",
            "syntax": "lead(expr [, offset [, default] ] ) [ IGNORE NULLS | RESPECT NULLS ] OVER clause",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "offset",
                    "description": "An optional INTEGER literal specifying the offset.",
                    "type": "INTEGER",
                    "optional": true
                },
                {
                    "name": "default",
                    "description": "An expression of the same type as expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is specified, any expr value that is NULL is ignored. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "OVER clause",
                    "description": "The clause describing the windowing. See",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "least",
            "description": "Returns the least value of all parameters, skipping null values.",
            "syntax": "least(expr1, expr2 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "An expression of any type that shares a least common type with all other arguments.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "left",
            "description": "Returns the leftmost len characters from str.",
            "syntax": "left(str, len)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "len",
            "description": "Returns the character length of string data or number of bytes of binary data. This function is a synonym for character_length function and char_length function.",
            "syntax": "len(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "length",
            "description": "Returns the character length of string data or number of bytes of binary data. This function is a synonym for character_length function and char_length function.",
            "syntax": "length(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "levenshtein",
            "description": "Returns the Levenshtein distance between the strings str1 and str2.",
            "syntax": "levenshtein(str1, str2 [, maxDistance])",
            "arguments": [
                {
                    "name": "str1",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "str2",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "maxDistance",
                    "description": "An optional INTEGER expression limiting the maximum Levenshtein distance considered. The default is unlimited.\nApplies to",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "like",
            "description": "Returns true if str matches pattern with escape.",
            "syntax": "str [ NOT ] like ( pattern [ ESCAPE escape ] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pattern",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "escape",
                    "description": "A single character STRING literal.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "ANY or SOME or ALL",
                    "description": "Applies to",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "list_secrets",
            "description": "Returns the keys which the user is authorized to see from Databricks secret service.",
            "syntax": "list_secrets()",
            "arguments": [
                {
                    "name": "scope STRING NOT NULL",
                    "description": "The namespace of the key.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "key STYRING NOT NULL",
                    "description": "The key itself",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ln",
            "description": "Returns the natural logarithm (base e) of expr.",
            "syntax": "ln(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "locate",
            "description": "Returns the position of the first occurrence of substr in str after position pos. This function is a synonym for position function.",
            "syntax": "locate(substr, str [, pos] )",
            "arguments": [
                {
                    "name": "subtr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An optional INTEGER expression.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "log",
            "description": "Returns the logarithm of expr with base.",
            "syntax": "log( [base,] expr)",
            "arguments": [
                {
                    "name": "base",
                    "description": "An optional expression that evaluates to a numeric.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "log10",
            "description": "Returns the logarithm of expr with base 10.",
            "syntax": "log10(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "log1p",
            "description": "Returns log(1 + expr).",
            "syntax": "log1p(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "log2",
            "description": "Returns the logarithm of expr with base 2.",
            "syntax": "log2(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "lower",
            "description": "Returns expr with all characters changed to lowercase.",
            "syntax": "lower(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "lpad",
            "description": "Returns expr, left-padded with pad to a length of len.",
            "syntax": "lpad(expr, len [, pad] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression to be padded.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An INTEGER expression specifying the length of the result string",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "pad",
                    "description": "An optional STRING or BINARY expression specifying the padding.",
                    "type": "STRING|BINARY",
                    "optional": true
                }
            ]
        },
        {
            "name": "lteqgtsign",
            "description": "Returns the same result as the EQUAL(=) for non-null operands, but returns true if both are NULL, false if one of the them is NULL. This operator is a synonym for expr1 is not distinct from expr2.",
            "syntax": "expr1 <=> expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of a comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "lteqsign",
            "description": "Returns true if expr1 is less than or equal to expr2, or false otherwise.",
            "syntax": "expr1 <= expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ltgtsign",
            "description": "Returns true if expr1 does not equal expr2, or false otherwise. This function is a synonym for != (bangeq sign) operator.",
            "syntax": "expr1 <> expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ltrim",
            "description": "Returns str with leading characters within trimStr removed.",
            "syntax": "ltrim( [trimstr ,] str)",
            "arguments": [
                {
                    "name": "trimstr",
                    "description": "An optional STRING expression with the string to be trimmed.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "str",
                    "description": "A STRING expression from which to trim.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "ltsign",
            "description": "Returns true if expr1 is less than expr2, or false otherwise.",
            "syntax": "expr1 < expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any comparable type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "luhn_check",
            "description": "Returns true if numStr passes the Luhn algorithm check.",
            "syntax": "luhn_check(numStr)",
            "arguments": [
                {
                    "name": "numStr",
                    "description": "An STRING expression composed of digits '0' through '9'.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "make_date",
            "description": "Creates a date from year, month, and day fields.",
            "syntax": "make_date(year, month, day)",
            "arguments": [
                {
                    "name": "year",
                    "description": "An INTEGER expression evaluating to a value from 1 to 9999.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "month",
                    "description": "An INTEGER expression evaluating to a value from 1 (January) to 12 (December).",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "day",
                    "description": "An INTEGER expression evaluating to a value from 1 to 31.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "make_dt_interval",
            "description": "Creates an interval from days, hours, mins and secs.",
            "syntax": "make_dt_interval( [ days [, hours [, mins [, secs] ] ] ] )",
            "arguments": [
                {
                    "name": "days",
                    "description": "An integral number of days, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "hours",
                    "description": "An integral number of hours, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "mins",
                    "description": "An integral number of minutes, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "secs",
                    "description": "A number of seconds with the fractional part in microsecond precision.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "make_interval",
            "description": "Creates an interval from years, months, weeks, days, hours, mins and secs.",
            "syntax": "make_interval( [years [, months [, weeks [, days [, hours [, mins [, secs] ] ] ] ] ] ] )",
            "arguments": [
                {
                    "name": "years",
                    "description": "An integral number of years, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "months",
                    "description": "An integral number of months, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "weeks",
                    "description": "An integral number of weeks, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "days",
                    "description": "An integral number of days, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "hours",
                    "description": "An integral number of hours, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "mins",
                    "description": "An integral number of minutes, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "secs",
                    "description": "A number of seconds with the fractional part in microsecond precision.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "make_timestamp",
            "description": "Creates a timestamp from year, month, day, hour, min, sec, and timezone fields.",
            "syntax": "make_timestamp(year, month, day, hour, min, sec [, timezone] )",
            "arguments": [
                {
                    "name": "year",
                    "description": "An INTEGER expression evaluating to a value from 1 to 9999.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "month",
                    "description": "An INTEGER expression evaluating to a value from 1 (January) to 12 (December).",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "day",
                    "description": "An INTEGER expression evaluating to a value from 1 to 31.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "hour",
                    "description": "An INTEGER expression evaluating to a value between 0 and 23.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "min",
                    "description": "An INTEGER expression evaluating to a value between 0 and 59.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "sec",
                    "description": "A numeric expression evaluating to a value between 0 and 60.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "timezone",
                    "description": "An optional STRING expression evaluating to a valid timezone string. For example",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "make_ym_interval",
            "description": "Creates an year-month interval from years and months.",
            "syntax": "make_ym_interval( [ years [, months ] ] )",
            "arguments": [
                {
                    "name": "years",
                    "description": "An integral number of years, positive or negative",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "months",
                    "description": "An integral number of months, positive or negative",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "map",
            "description": "Creates a map with the specified key-value pairs.",
            "syntax": "map( [key1, value1] [, ...] )",
            "arguments": [
                {
                    "name": "keyN",
                    "description": "An expression of any comparable type. All keyN must share a least common type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "valueN",
                    "description": "An expression of any type. All valueN must share a least common type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "map_concat",
            "description": "Returns the union of all expr map expressions.",
            "syntax": "map_concat([ expr1 [, ...] ])",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "A MAP expression. All exprN must share a least common type.",
                    "type": "MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_contains_key",
            "description": "Returns true if map contains key.",
            "syntax": "map_contains_key(map, key)",
            "arguments": [
                {
                    "name": "map",
                    "description": "An map to be searched.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "An expression with a type sharing a least common type with the map keys.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "map_entries",
            "description": "Returns an unordered array of all entries in map.",
            "syntax": "map_entries(map)",
            "arguments": [
                {
                    "name": "map",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_filter",
            "description": "Filters entries in the map in expr using the function func.",
            "syntax": "map_filter(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function with two parameters returning a BOOLEAN. The first parameter takes the key the second parameter takes the value.",
                    "type": "BOOLEAN.",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_from_arrays",
            "description": "Creates a map with a pair of the keys and values arrays.",
            "syntax": "map_from_arrays(keys, values)",
            "arguments": [
                {
                    "name": "keys",
                    "description": "An ARRAY expression without duplicates or NULL.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "values",
                    "description": "An ARRAY expression of the same cardinality as keys",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_from_entries",
            "description": "Creates a map created from the specified array of entries.",
            "syntax": "map_from_entries(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression of STRUCT with two fields.",
                    "type": "ARRAY|STRUCT",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_keys",
            "description": "Returns an unordered array containing the keys of map.",
            "syntax": "map_keys(map)",
            "arguments": [
                {
                    "name": "map",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_values",
            "description": "Returns an unordered array containing the values of map.",
            "syntax": "map_values(map)",
            "arguments": [
                {
                    "name": "map",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "map_zip_with",
            "description": "Merges map1 and map2 into a single map.",
            "syntax": "map_zip_with(map1, map2, func)",
            "arguments": [
                {
                    "name": "map1",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "map2",
                    "description": "A MAP expression of the same key type as map1",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function taking three parameters. The first parameter is the key, followed by the values from each map.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "mask",
            "description": "Returns a masked version of the input str.",
            "syntax": "mask(str [, upperChar [, lowerChar [, digitChar [, otherChar ] ] ] ] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "upperChar",
                    "description": "A single character STRING literal used to substitute upper case characters. The default is 'X'. If upperChar is NULL, upper case characters remain unmasked.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "lowerChar",
                    "description": "A single character STRING literal used to substitute lower case characters. The default is 'x'. If lowerChar is NULL, lower case characters remain unmasked.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "digitChar",
                    "description": "A single character STRING literal used to substitute digits. The default is 'n'. If digitChar is NULL, digits remain unmasked.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "otherChar",
                    "description": "A single character STRING literal used to substitute any other character. The default is NULL, which leaves these characters unmasked.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "max",
            "description": "Returns the maximum value of expr in a group.",
            "syntax": "max(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type that can be ordered.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "max_by",
            "description": "Returns the value of an expr1 associated with the maximum value of expr2 in a group.",
            "syntax": "max_by(expr1, expr2) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of a type that can be ordered.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "md5",
            "description": "Returns an MD5 128-bit checksum of expr as a hex string.",
            "syntax": "md5(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An BINARY expression.",
                    "type": "BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "mean",
            "description": "Returns the mean calculated from values of a group. This function is a synonym for avg aggregate function.",
            "syntax": "mean ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "median",
            "description": "Returns the median calculated from values of a group.",
            "syntax": "median ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or an interval.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "min",
            "description": "Returns the minimum value of expr in a group.",
            "syntax": "min(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type that can be ordered.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "min_by",
            "description": "Returns the value of an expr1 associated with the minimum value of expr2 in a group.",
            "syntax": "min_by(expr1, expr2) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of a type that can be ordered.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "minussign",
            "description": "Returns the subtraction of expr2 from expr1.",
            "syntax": "expr1 - expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A numeric, DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "The accepted type depends on the type of expr",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "minussignunary",
            "description": null,
            "syntax": "- expr",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "minute",
            "description": "Returns the minute component of the timestamp in expr. This function is a synonym for extract(MINUTES FROM expr).",
            "syntax": "minute(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An TIMESTAMP expression or a STRING of a valid timestamp format.",
                    "type": "TIMESTAMP|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "mod",
            "description": "Returns the remainder after dividend / divisor. This function is equivalent to the % (percent sign) operator.",
            "syntax": "mod(dividend, divisor)",
            "arguments": [
                {
                    "name": "dividend",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "divisor",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "mode",
            "description": "Returns the most frequent, not NULL, value of expr in a group.",
            "syntax": "mode(expr [, deterministic ]) [FILTER ( WHERE cond ) ]",
            "arguments": null
        },
        {
            "name": "monotonically_increasing_id",
            "description": "Returns monotonically increasing 64-bit integers.",
            "syntax": "monotonically_increasing_id()",
            "arguments": null
        },
        {
            "name": "month",
            "description": "Returns the month component of the timestamp in expr. This function is a synonym for extract(MONTH FROM expr).",
            "syntax": "month(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An TIMESTAMP expression or a STRING of a valid timestamp format.",
                    "type": "TIMESTAMP|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "months_between",
            "description": "Returns the number of months elapsed between dates or timestamps in expr1 and expr2.",
            "syntax": "months_between(expr1, expr2 [, roundOff] )",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of the same type as expr1.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "roundOff",
                    "description": "A optional BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "named_struct",
            "description": "Creates a struct with the specified field names and values.",
            "syntax": "named_struct( {name1, val1} [, ...] )",
            "arguments": [
                {
                    "name": "nameN",
                    "description": "A STRING literal naming field N.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "valN",
                    "description": "An expression of any type specifying the value for field N.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "nanvl",
            "description": "Returns expr1 if it\u2019s not NaN, or expr2 otherwise.",
            "syntax": "nanvl(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "negative",
            "description": "Returns the negated value of expr. This function is a synonym for - (minus sign) unary operator.",
            "syntax": "negative(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "next_day",
            "description": "Returns the first date which is later than expr and named as in dayOfWeek.",
            "syntax": "next_day(expr, dayOfWeek)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "dayOfWeek",
                    "description": "A STRING expression identifying a day of the week.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "not",
            "description": "Returns logical negation of the argument. This operator is an alias for ! (bang sign) operator.",
            "syntax": "not expr",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "now",
            "description": "Returns the current timestamp at the start of query evaluation.",
            "syntax": "now()",
            "arguments": null
        },
        {
            "name": "nth_value",
            "description": "Returns the value at a specific offset in the window.",
            "syntax": "nth_value(expr, offset) [ IGNORE NULLS | RESPECT NULLS ] OVER clause",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "offset",
                    "description": "An INTEGER literal greater than 0.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "IGNORE NULLS or RESPECT NULLS",
                    "description": "When IGNORE NULLS is used, any expr value that is NULL is ignored in the count. The default is RESPECT NULLS.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "OVER clause",
                    "description": "The clause describing the windowing. See",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ntile",
            "description": "Divides the rows for each window partition into n buckets ranging from 1 to at most n.",
            "syntax": "ntile([n])",
            "arguments": [
                {
                    "name": "n",
                    "description": "An optional INTEGER literal greater than 0.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "nullif",
            "description": "Returns NULL if expr1 equals expr2, or expr1 otherwise.",
            "syntax": "nullif(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of the same type as expr.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "nvl",
            "description": "Returns expr2 if expr1 is NULL, or expr1 otherwise. This function is a synonym for `coalesce(expr1, expr2)` with two arguments.",
            "syntax": "nvl(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that shares a least common type with expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "nvl2",
            "description": "Returns expr2 if expr1 is not NULL, or expr3 otherwise. This function is a synonym for CASE WHEN expr1 IS NOT NULL expr2 ELSE expr3 END.",
            "syntax": "nvl2(expr1, expr2, expr3)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr3",
                    "description": "An expression that shares a least common type with expr2.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "octet_length",
            "description": "Returns the byte length of string data or number of bytes of binary data.",
            "syntax": "octet_length(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                }
            ]
        },
        {
            "name": "or",
            "description": "Returns the logical OR of expr1 and expr2.",
            "syntax": "expr1 or expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                }
            ]
        },
        {
            "name": "overlay",
            "description": "Replaces input with replace that starts at pos and is of length len.",
            "syntax": "overlay(input, replace, pos[, len])",
            "arguments": [
                {
                    "name": "input",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "replace",
                    "description": "An expression of the same type as input.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An optional INTEGER expression.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "parse_url",
            "description": "Extracts a part from url.",
            "syntax": "parse_url(url, partToExtract [, key] )",
            "arguments": [
                {
                    "name": "url",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "partToExtract",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "percent_rank",
            "description": "Computes the percentage ranking of a value within the partition.",
            "syntax": "percent_rank()",
            "arguments": null
        },
        {
            "name": "percentile",
            "description": "Returns the exact percentile value of expr at the specified percentage in a group.",
            "syntax": "percentile ( [ALL | DISTINCT] expr, percentage [, frequency] ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "percentage",
                    "description": "A numeric expression between 0 and 1 or an ARRAY of numeric expressions, each between 0 and 1.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "frequency",
                    "description": "An optional integral number literal greater than 0.",
                    "type": null,
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "percentile_approx",
            "description": "Returns the approximate percentile of the expr within the group. This function is a synonym for approx_percentile aggregate function.",
            "syntax": "percentile_approx ( [ALL | DISTINCT ] expr, percentile [, accuracy] ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "percentile",
                    "description": "A numeric literal between 0 and 1 or a literal array of numeric values, each between 0 and 1.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "accuracy",
                    "description": "An INTEGER literal greater than 0. If accuracy is omitted it is set to 10000.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "percentile_cont",
            "description": "Returns the value that corresponds to the percentile of the provided sortKeys using a continuous distribution model.",
            "syntax": "percentile_cont ( percentile )\n       WITHIN GROUP (ORDER BY sortKey [ASC | DESC] )",
            "arguments": [
                {
                    "name": "percentile",
                    "description": "A numeric literal between 0 and 1 or a literal array of numeric literals, each between 0 and 1.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "sortKey",
                    "description": "A numeric expression over which the percentile will be computed.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ASC or DESC",
                    "description": "Optionally specify whether the percentile is computed using ascending or descending order. The default is ASC.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "percentile_disc",
            "description": "Returns the value that corresponds to the percentile of the provided sortKey using a discrete distribution model.",
            "syntax": "percentile_disc ( percentile )\n       WITHIN GROUP (ORDER BY sortKey [ASC | DESC] )",
            "arguments": [
                {
                    "name": "percentile",
                    "description": "A numeric literal between 0 and 1 or a literal array of numeric literals, each between 0 and 1.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "sortKey",
                    "description": "A numeric expression over which the percentile is computed.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "ASC or DESC",
                    "description": "Optionally specify whether the percentile is computed using ascending or descending order. The default is ASC.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "percentsign",
            "description": "Returns the remainder after dividend / divisor. This function is equivalent to mod function.",
            "syntax": "dividend % divisor",
            "arguments": [
                {
                    "name": "dividend",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "divisor",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "pi",
            "description": "Returns pi.",
            "syntax": "pi()",
            "arguments": null
        },
        {
            "name": "pipepipesign",
            "description": "Returns the concatenation of expr1 and expr2. This operator is a synonym for concat function.",
            "syntax": "expr1 || expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A STRING, BINARY or ARRAY of STRING or BINARY expression.",
                    "type": "STRING,|BINARY|ARRAY|STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression with type matching expr1.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "pipesign",
            "description": "Returns the bitwise OR of expr1 and expr2.",
            "syntax": "expr1 | expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "plussign",
            "description": "Returns the sum of expr1 and expr2.",
            "syntax": "expr1 + expr2",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A numeric, DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "If expr1 is a numeric expr2 must be numeric expression, or an INTERVAL otherwise.",
                    "type": "INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "plussignunary",
            "description": null,
            "syntax": "+ expr",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or INTERVAL.",
                    "type": "INTERVAL.",
                    "optional": false
                }
            ]
        },
        {
            "name": "pmod",
            "description": "Returns the positive remainder after dividend / divisor.",
            "syntax": "pmod(dividend, divisor)",
            "arguments": [
                {
                    "name": "dividend",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "divisor",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "posexplode",
            "description": "Returns a set of rows by un-nesting expr with numbering of positions.",
            "syntax": "posexplode(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "posexplode_outer",
            "description": "Returns rows by un-nesting the array with numbering of positions using OUTER semantics.",
            "syntax": "posexplode_outer(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "position",
            "description": "Returns the position of the first occurrence of substr in str after position pos. This function is a synonym for locate function.",
            "syntax": "position(substr, str [, pos] )",
            "arguments": [
                {
                    "name": "substr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "positive",
            "description": "Returns the value of expr. This function is a synonym for + (plus sign) unary operator.",
            "syntax": "positive(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "pow",
            "description": "Raises expr1 to the power of expr2. This function is a synonym for power function.",
            "syntax": "pow(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "power",
            "description": "Raises expr1 to the power of expr2. This function is a synonym for pow function.",
            "syntax": "power(expr1, expr2)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "printf",
            "description": "Returns a formatted string from printf-style format strings.",
            "syntax": "printf(strfmt[, obj1, ...])",
            "arguments": [
                {
                    "name": "strfmt",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "objN",
                    "description": "A STRING or numeric expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "quarter",
            "description": "Returns the quarter of the year for expr in the range 1 to 4. This function is a synonym for extract(QUARTER FROM expr).",
            "syntax": "quarter(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "radians",
            "description": "Converts expr in degrees to radians.",
            "syntax": "radians(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "raise_error",
            "description": "Throws an exception with expr as the message.",
            "syntax": "raise_error(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "rand",
            "description": "Returns a random value between 0 and 1. This function is a synonym for random function.",
            "syntax": "rand( [seed] )",
            "arguments": [
                {
                    "name": "seed",
                    "description": "An optional INTEGER literal.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "randn",
            "description": "Returns a random value from a standard normal distribution.",
            "syntax": "randn( [seed] )",
            "arguments": [
                {
                    "name": "seed",
                    "description": "An optional INTEGER literal.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "random",
            "description": "Returns a random value between 0 and 1. This function is a synonym for random function.",
            "syntax": "random( [seed] )",
            "arguments": [
                {
                    "name": "seed",
                    "description": "An optional INTEGER literal.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "range",
            "description": null,
            "syntax": "range(end)\n\nrange(start, end [, step [, numParts] ] )",
            "arguments": [
                {
                    "name": "start",
                    "description": "An optional BIGINT literal defaulted to 0, marking the first value generated.",
                    "type": "BIGINT",
                    "optional": true
                },
                {
                    "name": "end",
                    "description": "A BIGINT literal marking endpoint (exclusive) of the number generation.",
                    "type": "BIGINT",
                    "optional": false
                },
                {
                    "name": "step",
                    "description": "An optional BIGINT literal defaulted to 1, specifying the increment used when generating values.",
                    "type": "BIGINT",
                    "optional": true
                },
                {
                    "name": "numParts",
                    "description": "An optional INTEGER literal specifying how the production of rows is spread across partitions.",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "rank",
            "description": "Returns the rank of a value compared to all values in the partition.",
            "syntax": "rank()",
            "arguments": null
        },
        {
            "name": "read_files",
            "description": "Reads files under a provided location and returns the data in tabular form.",
            "syntax": "read_files(path [, option_key => option_value ] [...])",
            "arguments": [
                {
                    "name": "path",
                    "description": "A STRING with the URI of the location of the data. Supports reading from Azure Data Lake Storage Gen2 ('abfss",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "option_key",
                    "description": "The name of the option to configure. You need to use backticks (`) for options that contain dots (.).",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "option_value",
                    "description": "A constant expression to set the option to. Accepts literals and scalar functions.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "read_kafka",
            "description": "Reads data from an Apache Kafka cluster and returns the data in tabular form.",
            "syntax": "read_kafka([option_key => option_value ] [, ...])",
            "arguments": [
                {
                    "name": "option_key",
                    "description": "The name of the option to configure. You must use backticks (`) for options that contain dots (.).",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "option_value",
                    "description": "A constant expression to set the option. Accepts literals and scalar functions.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "read_kinesis",
            "description": "Returns a table with records read from Kinesis from one or more streams.",
            "syntax": "read_kinesis ( { parameter => value } [, ...] )",
            "arguments": null
        },
        {
            "name": "read_pubsub",
            "description": "Returns a table with records read from Pub/Sub from a topic. Only supports streaming queries.",
            "syntax": "read_pubsub( { parameter => value } [, ...])",
            "arguments": null
        },
        {
            "name": "read_pulsar",
            "description": "Preview",
            "syntax": "read_pulsar ( { option_key => option_value } [, ...] )",
            "arguments": [
                {
                    "name": "__key STRING NOT NULL",
                    "description": "Pulsar message key.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "value BINARY NOT NULL",
                    "description": "Pulsar message value.\nNote",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "__topic STRING NOT NULL",
                    "description": "Pulsar topic name.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "__messageId BINARY NOT NULL",
                    "description": "Pulsar message id.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "__publishTime TIMESTAMP NOT NULL",
                    "description": "Pulsar message publish time.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "__eventTime TIMESTAMP NOT NULL",
                    "description": "Pulsar message event time.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "__messageProperties MAP<STRING, STRING>",
                    "description": "Pulsar message properties.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "read_state_metadata",
            "description": "Returns a table with rows that represent the metadata of a streaming query state.",
            "syntax": "read_state_metadata(path)",
            "arguments": [
                {
                    "name": "path",
                    "description": "A STRING literal with the path of the streaming query checkpoint location.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "read_statestore",
            "description": "Preview",
            "syntax": "read_statestore ( path [, option_key => option_value ] [ ... ] )",
            "arguments": [
                {
                    "name": "path",
                    "description": "A STRING literal. The path of the streaming query checkpoint location.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "option_key",
                    "description": "The name of the option to configure. You need to use backticks (`) for options that contain dots (.).",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "option_value",
                    "description": "A constant expression to set the option to. Accepts literals and scalar functions.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "reduce",
            "description": "Aggregates elements in an array using a custom aggregator. This function is a synonym for aggregate function.",
            "syntax": "reduce(expr, start, merge [, finish] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "An initial value of any type.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "merge",
                    "description": "A lambda function used to aggregate the current element.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "finish",
                    "description": "An optional lambda function used to finalize the aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "reflect",
            "description": "Calls a method with reflection.",
            "syntax": "reflect(class, method [, arg1] [, ...])",
            "arguments": [
                {
                    "name": "class",
                    "description": "A STRING literal specifying the java class.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "method",
                    "description": "A STRING literal specifying the java method.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "argN",
                    "description": "An expression with a type appropriate for the selected method.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "regexp",
            "description": "Returns true if str matches regex.  This function is a synonym for rlike operator.",
            "syntax": "str [NOT] regexp regex",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regex",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "regexp_count",
            "description": "Returns the number of times str matches the regexp pattern.",
            "syntax": "regexp_count( str, regexp )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "regexp_extract",
            "description": "Extracts the first string in str that matches the regexp expression and corresponds to the regex group index.",
            "syntax": "regexp_extract(str, regexp [, idx] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "idx",
                    "description": "An optional integral number expression greater or equal 0 with default 1.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regexp_extract_all",
            "description": "Extracts all of the strings in str that match the regexp expression and correspond to the regex group index.",
            "syntax": "regexp_extract_all(str, regexp [, idx] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "idx",
                    "description": "An optional integral number expression greater or equal 0 with default 1.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regexp_instr",
            "description": "Returns the position of the first substring in str that matches regexp.",
            "syntax": "regexp_instr( str, regexp )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "regexp_like",
            "description": "Returns true if str matches regex. This function is a synonym for rlike operator.",
            "syntax": "regexp_like( str, regex )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regex",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "regexp_replace",
            "description": "Replaces all substrings of str that match regexp with rep.",
            "syntax": "regexp_replace(str, regexp, rep [, position] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "rep",
                    "description": "A STRING expression which is the replacement string.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "position",
                    "description": "A optional integral numeric literal greater than 0, stating where to start matching. The default is 1.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regexp_substr",
            "description": "Returns the first substring in str that matches regexp.",
            "syntax": "regexp_substr( str, regexp )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression with a pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "regr_avgx",
            "description": "Returns the mean of xExpr calculated from values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_avgx( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_avgy",
            "description": "Returns the mean of yExpr calculated from values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_avgy( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_count",
            "description": "Returns the number of non-null value pairs yExpr, xExpr in the group.",
            "syntax": "regr_count ( [ALL | DISTINCT] yExpr, xExpr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_intercept",
            "description": "Returns the intercept of the univariate linear regression line in a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_intercept( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_r2",
            "description": "Returns the coefficient of determination from values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_r2( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_slope",
            "description": "Returns the slope of the linear regression line in a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_slope( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_sxx",
            "description": "Returns the sum of squares of the xExpr values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_sxx( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_sxy",
            "description": "Returns the sum of products of yExpr and xExpr calculated from values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_sxy( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "A numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "A numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "regr_syy",
            "description": "Returns the sum of squares of the yExpr values of a group where xExpr and yExpr are NOT NULL.",
            "syntax": "regr_syy( [ALL | DISTINCT] yExpr, xExpr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "yExpr",
                    "description": "An numeric expression, the dependent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "xExpr",
                    "description": "An numeric expression, the independent variable.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for the function.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "repeat",
            "description": "Returns the string that repeats expr n times.",
            "syntax": "repeat(expr, n)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "n",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "replace",
            "description": "Replaces all occurrences of search with replace.",
            "syntax": "replace(str, search [, replace] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be searched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "search",
                    "description": "A STRING expression to be replaced.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "replace",
                    "description": "An optional STRING expression to replace search with. The default is an empty string.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "reverse",
            "description": "Returns a reversed string or an array with reverse order of elements.",
            "syntax": "reverse(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or ARRAY expression.",
                    "type": "STRING|ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "right",
            "description": "Returns the rightmost len characters from the string str.",
            "syntax": "right(str, len)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An integral number expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "rint",
            "description": "Returns expr rounded to a whole number as a DOUBLE. This function is a synonym for round(expr, 0).",
            "syntax": "rint(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "rlike",
            "description": "Returns true if str matches regex.",
            "syntax": "str [NOT] rlike regex",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be matched.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regex",
                    "description": "A STRING expression with a matching pattern.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "round",
            "description": "Returns the rounded expr using HALF_UP rounding mode.",
            "syntax": "round(expr [, targetScale] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetScale",
                    "description": "An INTEGER constant expression. If targetScale is omitted the default is 0 (whole number).\nIn Databricks SQL and Databricks Runtime 12.2 LTS and above",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "row_number",
            "description": "Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows in the window partition.",
            "syntax": "row_number()",
            "arguments": null
        },
        {
            "name": "rpad",
            "description": "Returns expr, right-padded with pad to a length of len.",
            "syntax": "rpad(expr, len [, pad] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression to be padded.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "pad",
                    "description": "An optional STRING or BINARY expression with the pattern for padding. The default is a space character for STRING and x\u201900\u2019 for BINARY.",
                    "type": "STRING|BINARY|STRING|BINARY.",
                    "optional": true
                }
            ]
        },
        {
            "name": "rtrim",
            "description": "Returns str with trailing characters removed.",
            "syntax": "rtrim( [trimStr ,] str)",
            "arguments": [
                {
                    "name": "trimStr",
                    "description": "An optional STRING expression with characters to be trimmed. The default is a space character.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "str",
                    "description": "A STRING expression to be trimmed.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "schema_of_csv",
            "description": "Returns the schema of a CSV string in DDL format.",
            "syntax": "schema_of_csv(csv [, options] )",
            "arguments": [
                {
                    "name": "csv",
                    "description": "A STRING literal with valid CSV data.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literals where keys and values are STRING.",
                    "type": "MAP|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "schema_of_json",
            "description": "Returns the schema of a JSON string in DDL format.",
            "syntax": "schema_of_json(jsonStr [, options] )",
            "arguments": [
                {
                    "name": "jsonStr",
                    "description": "A STRING expression with a JSON string.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literals with keys and values being STRING.",
                    "type": "MAP|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "schema_of_json_agg",
            "description": "Returns the combined schema of all JSON strings in a group in DDL format.",
            "syntax": "schema_of_json_agg(jsonStr [, options] ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "jsonStr",
                    "description": "A STRING literal with JSON.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literal with keys and values being STRING. For details on options, see from_json function.",
                    "type": "MAP|STRING.",
                    "optional": true
                },
                {
                    "name": "cond",
                    "description": "An optional BOOLEAN expression filtering the rows used for aggregation.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "schema_of_xml",
            "description": "Preview",
            "syntax": "schema_of_xml(xmlStr [, options] )",
            "arguments": [
                {
                    "name": "xmlStr",
                    "description": "A STRING expression with a XML string.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP<STRING, STRING> literal.",
                    "type": "MAP<STRING,|STRING>",
                    "optional": true
                }
            ]
        },
        {
            "name": "sec",
            "description": "Returns the secant of expr.",
            "syntax": "sec(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the angle in radians.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "second",
            "description": "Returns the second component of the timestamp in expr.",
            "syntax": "second(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "secret",
            "description": "Extracts a secret value with the given scope and key from Databricks secret service.",
            "syntax": "secret ( scope, key )",
            "arguments": [
                {
                    "name": "scope",
                    "description": "A constant string expression containing the scope of the secret to be extracted. The scope is the namespace in which multiple keys might reside.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "A constant string expression with the key of the secret to be extracted.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "sentences",
            "description": "Splits str into an array of array of words.",
            "syntax": "sentences(str [, lang, country] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be parsed.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "lang",
                    "description": "An optional STRING expression with a language code from ISO 639 Alpha-2 (e.g. \u2018DE\u2019), Alpha-3, or a language subtag of up to 8 characters.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "country",
                    "description": "An optional STRING expression with a country code from ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "sequence",
            "description": "Generates an array of elements from start to stop (inclusive), incrementing by step.",
            "syntax": "sequence(start, stop [, step] )",
            "arguments": [
                {
                    "name": "start",
                    "description": "An expression of an integral numeric type, DATE, or TIMESTAMP.",
                    "type": "DATE,|TIMESTAMP.",
                    "optional": false
                },
                {
                    "name": "stop",
                    "description": "If start is numeric an integral numeric, a DATE or TIMESTAMP otherwise.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "step",
                    "description": "An INTERVAL expression if start is a DATE or TIMESTAMP, or an integral numeric otherwise.",
                    "type": "INTERVAL|DATE|TIMESTAMP,",
                    "optional": false
                }
            ]
        },
        {
            "name": "session_user",
            "description": "Returns the user connected to Databricks.",
            "syntax": "session_user()",
            "arguments": null
        },
        {
            "name": "session_window",
            "description": "Creates a session-window over a timestamp expression.",
            "syntax": "session_window(expr, gapDuration)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression specifying the subject of the window.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "gapDuration",
                    "description": "A STRING expression representing the width of the window as an INTERVAL DAY TO SECOND literal.",
                    "type": "STRING|INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "sha",
            "description": "Returns a sha1 hash value as a hex string of expr. This function is a synonym for sha1 function.",
            "syntax": "sha(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "sha1",
            "description": "Returns a sha1 hash value as a hex string of expr. This function is a synonym for sha function.",
            "syntax": "sha1(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "sha2",
            "description": "Returns a checksum of the SHA-2 family as a hex string of expr.",
            "syntax": "sha2(expr, bitLength)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "bitLength",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "shiftleft",
            "description": "Returns a bitwise left shifted by n bits.",
            "syntax": "shiftleft(expr, n)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An INTEGER or BIGINT expression.",
                    "type": "INTEGER|BIGINT",
                    "optional": false
                },
                {
                    "name": "n",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "shiftright",
            "description": "Returns a bitwise signed right shifted by n bits.",
            "syntax": "shiftright(expr, n)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An INTEGER or BIGINT expression.",
                    "type": "INTEGER|BIGINT",
                    "optional": false
                },
                {
                    "name": "n",
                    "description": "An INTEGER expression specifying the number of bits to shift.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "shiftrightunsigned",
            "description": "Returns a bitwise unsigned right shifted by n bits.",
            "syntax": "shiftrightunsigned(expr, n)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An INTEGER or BIGINT expression.",
                    "type": "INTEGER|BIGINT",
                    "optional": false
                },
                {
                    "name": "n",
                    "description": "An INTEGER expression specifying the number of bits to shift.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "shuffle",
            "description": "Returns a random permutation of the array in expr.",
            "syntax": "shuffle(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                }
            ]
        },
        {
            "name": "sign",
            "description": "Returns -1.0, 0.0, or 1.0 as expr is negative, 0, or positive. This function is a synonym for signum function.",
            "syntax": "sign(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "signum",
            "description": "Returns -1.0, 0.0, or 1.0 as expr is negative, 0, or positive. This function is a synonym for sign function.",
            "syntax": "signum(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "sin",
            "description": "Returns the sine of expr.",
            "syntax": "sin(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the angle in radians.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "sinh",
            "description": "Returns the hyperbolic sine of expr.",
            "syntax": "sinh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "size",
            "description": "Returns the cardinality of the array or map in expr.",
            "syntax": "size(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY or MAP expression.",
                    "type": "ARRAY|MAP",
                    "optional": false
                }
            ]
        },
        {
            "name": "skewness",
            "description": "Returns the skewness value calculated from values of a group.",
            "syntax": "skewness ( [ALL | DISTINCT ] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "slashsign",
            "description": "Returns dividend divided by divisor.",
            "syntax": "dividend / divisor",
            "arguments": [
                {
                    "name": "dividend",
                    "description": "A numeric or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                },
                {
                    "name": "divisor",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "slice",
            "description": "Returns a subset of an array.",
            "syntax": "slice(expr, start, length)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "length",
                    "description": "An INTEGER expression that is greater or equal to 0.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "smallint",
            "description": "Casts the value expr to SMALLINT. This function is a synonym for CAST(expr AS SMALLINT). See cast function for details.",
            "syntax": "smallint(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression which is castable to SMALLINT.",
                    "type": "SMALLINT.",
                    "optional": false
                }
            ]
        },
        {
            "name": "some",
            "description": "Returns true if at least one value of expr in a group is true.",
            "syntax": "some(expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A BOOLEAN expression.",
                    "type": "BOOLEAN",
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "sort_array",
            "description": "Returns the array in expr in sorted order.",
            "syntax": "sort_array(expr [, ascendingOrder] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression of sortable elements.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "ascendingOrder",
                    "description": "An optional BOOLEAN expression defaulting to true.",
                    "type": "BOOLEAN",
                    "optional": true
                }
            ]
        },
        {
            "name": "soundex",
            "description": "Returns the soundex code of the string.",
            "syntax": "soundex(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "space",
            "description": "Returns a string consisting of n spaces.",
            "syntax": "space(n)",
            "arguments": [
                {
                    "name": "n",
                    "description": "An INTEGER expression that evaluates to a numeric.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "spark_partition",
            "description": "Returns the current partition ID.",
            "syntax": "spark_partition_id()",
            "arguments": null
        },
        {
            "name": "split",
            "description": "Splits str around occurrences that match regex and returns an array with a length of at most limit.",
            "syntax": "split(str, regex [, limit] )",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be split.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "regexp",
                    "description": "A STRING expression that is a Java regular expression used to split str.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "limit",
                    "description": "An optional INTEGER expression defaulting to 0 (no limit).",
                    "type": "INTEGER",
                    "optional": true
                }
            ]
        },
        {
            "name": "split_part",
            "description": "Splits str around occurrences of delim and returns the partNum part.",
            "syntax": "split_part(str, delim, partNum)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to be split.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "delimiter",
                    "description": "A STRING expression serving as delimiter for the parts.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "partNum",
                    "description": "An INTEGER expression electing the part to be returned.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "sql_keywords",
            "description": "Returns the set of SQL keywords in Databricks.",
            "syntax": "sql_keywords()",
            "arguments": [
                {
                    "name": "keyword STRING NOT NULL",
                    "description": "The name of the SQL keyword",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "reserved BOOLEAN NOT NULL",
                    "description": "true if the keyword is reserved.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "sqrt",
            "description": "Returns the square root of expr.",
            "syntax": "sqrt(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "stack",
            "description": "Separates expr1, \u2026, exprN into numRows rows.",
            "syntax": "stack(numRows, expr1 [, ...] )",
            "arguments": [
                {
                    "name": "numRows",
                    "description": "An INTEGER literal greater than 0 specifying the number of rows produced.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "exprN",
                    "description": "An expression of any type. The type of any exprN must match the type of expr(N+numRows).",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "startswith",
            "description": "Returns true if expr begins with startExpr.",
            "syntax": "startswith(expr, startExpr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "startExpr",
                    "description": "A STRING expression that is compared to the start of str.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "std",
            "description": "Returns the sample standard deviation calculated from the values in the group. This function is a synonym for stddev aggregate function.",
            "syntax": "std ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "stddev",
            "description": "Returns the sample standard deviation calculated from the values in the group. This function is a synonym for std aggregate function.",
            "syntax": "stddev ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "stddev_pop",
            "description": "Returns the population standard deviation calculated from the values of a group.",
            "syntax": "stddev_pop ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "stddev_samp",
            "description": "Returns the sample standard deviation calculated from the values of a group.",
            "syntax": "stddev_samp ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "str_to_map",
            "description": "Creates a map after splitting the input into key-value pairs using delimiters.",
            "syntax": "str_to_map(expr [, pairDelim [, keyValueDelim] ] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "pairDelim",
                    "description": "An optional STRING literal defaulting to ',' that specifies how to split entries.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "keyValueDelim",
                    "description": "An optional STRING literal defaulting to '",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "string",
            "description": "Casts the value expr to STRING. This function is a synonym for cast(expr AS STRING). See cast function for details.",
            "syntax": "string(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that can be cast to STRING.",
                    "type": "STRING.",
                    "optional": false
                }
            ]
        },
        {
            "name": "struct",
            "description": "Creates a STRUCT with the specified field values.",
            "syntax": "struct(expr1 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "substr",
            "description": "Returns the substring of expr that starts at pos and is of length len. This function is a synonym for substring function.",
            "syntax": "substr(expr, pos [, len] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An integral numeric expression specifying the starting position.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An optional integral numeric expression.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "substring",
            "description": "Returns the substring of expr that starts at pos and is of length len. This function is a synonym for substr function.",
            "syntax": "substring(expr, pos [, len])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An BINARY or STRING expression.",
                    "type": "BINARY|STRING",
                    "optional": false
                },
                {
                    "name": "pos",
                    "description": "An integral numeric expression specifying the starting position.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "len",
                    "description": "An optional integral numeric expression.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "substring_index",
            "description": "Returns the substring of expr before count occurrences of the delimiter delim.",
            "syntax": "substring_index(expr, delim, count)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING or BINARY expression.",
                    "type": "STRING|BINARY",
                    "optional": false
                },
                {
                    "name": "delim",
                    "description": "An expression matching the type of expr specifying the delimiter.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "count",
                    "description": "An INTEGER expression to count the delimiters.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "sum",
            "description": "Returns the sum calculated from the values of a group.",
            "syntax": "sum ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional Boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "table_changes",
            "description": "Returns a log of changes to a Delta Lake table with Change Data Feed enabled.",
            "syntax": "table_changes ( table_str, start [, end ] )",
            "arguments": [
                {
                    "name": "table_str",
                    "description": "A STRING literal representing the optionally qualified name of the table.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "A BIGINT or TIMESTAMP literal, representing the first version or timestamp of change to return.",
                    "type": "BIGINT|TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "end",
                    "description": "An optional BIGINT or TIMESTAMP literal, representing the last version or timestamp of change to return. If not specified all changes from start up to the current change are returned.",
                    "type": "BIGINT|TIMESTAMP",
                    "optional": true
                }
            ]
        },
        {
            "name": "tan",
            "description": "Returns the tangent of expr.",
            "syntax": "tan(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the angle in radians.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "tanh",
            "description": "Returns the hyperbolic tangent of expr.",
            "syntax": "tanh(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric expressing the hyperbolic angle.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "tildesign",
            "description": "Returns the bitwise NOT of expr.",
            "syntax": "~ expr",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An integral numeric type expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "timediff",
            "description": "Returns the difference between two timestamps measured in units. This function is a synonym for timestampdiff function.",
            "syntax": "timediff(unit, start, end)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "A starting TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "end",
                    "description": "An ending TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "timestamp",
            "description": "Casts expr to TIMESTAMP. This function is a synonym for CAST(expr AS TIMESTAMP). For details see cast function.",
            "syntax": "timestamp(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression that can be cast to TIMESTAMP.",
                    "type": "TIMESTAMP.",
                    "optional": false
                }
            ]
        },
        {
            "name": "timestamp_micros",
            "description": "Creates a timestamp expr microseconds since UTC epoch.",
            "syntax": "timestamp_micros(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An integral numeric expression specifying microseconds.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "timestamp_millis",
            "description": "Creates a timestamp expr milliseconds since UTC epoch.",
            "syntax": "timestamp_millis(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An integral numeric expression specifying milliseconds.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "timestamp_seconds",
            "description": "Creates timestamp expr seconds since UTC epoch.",
            "syntax": "timestamp_seconds(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An numeric expression specifying seconds.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "timestampadd",
            "description": "Adds value units to a timestamp expr.",
            "syntax": "timestampadd(unit, value, expr)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY | DAYOFYEAR |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "value",
                    "description": "A numeric expression with the number of units to add to expr.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "timestampdiff",
            "description": "Returns the difference between two timestamps measured in units.",
            "syntax": "timestampdiff(unit, start, end)\n\nunit\n { MICROSECOND |\n   MILLISECOND |\n   SECOND |\n   MINUTE |\n   HOUR |\n   DAY |\n   WEEK |\n   MONTH |\n   QUARTER |\n   YEAR }",
            "arguments": [
                {
                    "name": "unit",
                    "description": "A unit of measure.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "start",
                    "description": "A starting TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "end",
                    "description": "An ending TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "tinyint",
            "description": "Casts expr to TINYINT. This function is a synonym for CAST(expr AS TINYINT). See cast function for details.",
            "syntax": "tinyint(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression which is castable to TINYINT.",
                    "type": "TINYINT.",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_binary",
            "description": "Returns expr cast to BINARY based on fmt.",
            "syntax": "to_binary(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression to cast.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING literal describing how to interpret expr.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_char",
            "description": "Returns expr cast to STRING using formatting fmt.",
            "syntax": "to_char(expr, { numericFormat | datetimeFormat | stringFormat } )\n\nnumericFormat\n  { ' [ S ] [ L | $ ]\n      [ 0 | 9 | G | , ] [...]\n      [ . | D ]\n      [ 0 | 9 ] [...]\n      [ L | $ ] [ PR | MI | S ] ' }",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of type numeric, datetime, STRING, or BINARY.",
                    "type": "STRING,|BINARY.",
                    "optional": false
                },
                {
                    "name": "numericFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type numeric.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "datetimeFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type datetime.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "stringFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type BINARY.",
                    "type": "STRING|BINARY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_csv",
            "description": "Returns a CSV string with the specified struct value.",
            "syntax": "to_csv(expr [, options] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRUCT expression.",
                    "type": "STRUCT",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literal expression with keys and values being STRING.",
                    "type": "MAP|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "to_date",
            "description": "Returns expr cast to a date using an optional formatting.",
            "syntax": "to_date(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a date.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "An optional format STRING expression.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "to_json",
            "description": "Returns a JSON string with the struct specified in expr.",
            "syntax": "to_json(expr [, options] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRUCT expression.",
                    "type": "STRUCT",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literal expression with keys and values being STRING.",
                    "type": "MAP|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "to_number",
            "description": "Returns expr cast to DECIMAL using formatting fmt.",
            "syntax": "to_number(expr, fmt)\n\nfmt\n  { ' [ MI | S ] [ L | $ ]\n      [ 0 | 9 | G | , ] [...]\n      [ . | D ]\n      [ 0 | 9 ] [...]\n      [ L | $ ] [ PR | MI | S ] ' }",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a number. expr may include leading or trailing spaces.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING literal, specifying the expected format of expr.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_timestamp",
            "description": "Returns expr cast to a timestamp using an optional formatting.",
            "syntax": "to_timestamp(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a timestamp.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "An optional format STRING expression.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "to_unix_timestamp",
            "description": "Returns the timestamp in expr as a UNIX timestamp.",
            "syntax": "to_unix_timestamp(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a timestamp.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "An optional format STRING expression.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "to_utc_timestamp",
            "description": "Returns the timestamp in expr in a different timezone as UTC.",
            "syntax": "to_utc_timestamp(expr, timezone)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "timezone",
                    "description": "A STRING expression that is a valid timezone.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_varchar",
            "description": "Returns expr cast to STRING using formatting fmt.",
            "syntax": "to_varchar(expr, { numericFormat | datetimeFormat | stringFormat } )\n\nnumericFormat\n  { ' [ S ] [ L | $ ]\n      [ 0 | 9 | G | , ] [...]\n      [ . | D ]\n      [ 0 | 9 ] [...]\n      [ L | $ ] [ PR | MI | S ] ' }",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression of type numeric, datetime, STRING, or BINARY.",
                    "type": "STRING,|BINARY.",
                    "optional": false
                },
                {
                    "name": "numericFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type numeric.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "datetimeFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type datetime.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "stringFormat",
                    "description": "A STRING literal, specifying the formatted output for expr of type BINARY.",
                    "type": "STRING|BINARY.",
                    "optional": false
                }
            ]
        },
        {
            "name": "to_xml",
            "description": "Returns an XML string with the struct specified in expr.",
            "syntax": "to_xml(expr [, options] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRUCT expression.",
                    "type": "STRUCT",
                    "optional": false
                },
                {
                    "name": "options",
                    "description": "An optional MAP literal expression with keys and values being STRING.",
                    "type": "MAP|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "transform",
            "description": "Transforms elements in an array in expr using the function func.",
            "syntax": "transform(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "transform_keys",
            "description": "Transforms keys in a map in expr using the function func.",
            "syntax": "transform_keys(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "transform_values",
            "description": "Transforms values in a map in expr using the function func.",
            "syntax": "transform_values(expr, func)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "translate",
            "description": "Returns an expr where all characters in from have been replaced with those in to.",
            "syntax": "translate(expr, from, to)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "from",
                    "description": "A STRING expression consisting of a set of characters to be replaced.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "to",
                    "description": "A STRING expression consisting of a matching set of characters to replace from.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "trim",
            "description": "Removes the leading and trailing space characters from str.",
            "syntax": "trim(str)\n\ntrim(BOTH FROM str)",
            "arguments": [
                {
                    "name": "trimStr",
                    "description": "A STRING expression with a set of characters to be trimmed.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "str",
                    "description": "A STRING expression to be trimmed.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "trunc",
            "description": "Returns a date with the date truncated to the unit specified by the format model unit.",
            "syntax": "trunc(expr, unit)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                },
                {
                    "name": "unit",
                    "description": "A STRING expression specifying how to truncate.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_add",
            "description": "Returns the sum of expr1 and expr2, or NULL in case of error.",
            "syntax": "try_add ( expr1 , expr2 )",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A numeric, DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "If expr1 is a numeric expr2 must be numeric expression, or an INTERVAL otherwise.",
                    "type": "INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_aes_decrypt",
            "description": "Decrypts a binary produced using AES encryption and returns NULL if that fails for any reason.",
            "syntax": "try_aes_decrypt(expr, key [, mode [, padding [, aad]]])",
            "arguments": [
                {
                    "name": "expr",
                    "description": "The BINARY expression to be decrypted.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "A BINARY expression. Must match the key originally used to produce the encrypted value and be 16, 24, or 32 bytes long.",
                    "type": "BINARY",
                    "optional": false
                },
                {
                    "name": "mode",
                    "description": "An optional STRING expression describing the encryption mode used to produce the encrypted value.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "padding",
                    "description": "An optional STRING expression describing how encryption handled padding of the value to key length.",
                    "type": "STRING",
                    "optional": true
                },
                {
                    "name": "aad",
                    "description": "An optional STRING expression providing authenticated additional data (AAD) in GCM mode. Must match the aad used to produce the encrypted value. Applies to Databricks SQL and Databricks Runtime 13.3 LTS and above.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "try_avg",
            "description": "Returns the mean calculated from values of a group. If there is an overflow, returns NULL.",
            "syntax": "try_avg( [ALL | DISTINCT] expr) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that returns a numeric or an interval value.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "try_cast",
            "description": "Returns the value of sourceExpr cast to data type targetType if possible, or NULL if not possible.",
            "syntax": "try_cast(sourceExpr AS targetType)",
            "arguments": [
                {
                    "name": "sourceExpr",
                    "description": "Any castable expression.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "targetType",
                    "description": "The type of the result.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "try_divide",
            "description": "Returns dividend divided by divisor, or NULL if divisor is 0.",
            "syntax": "try_divide(dividend, divisor)",
            "arguments": [
                {
                    "name": "dividend",
                    "description": "A numeric or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                },
                {
                    "name": "divisor",
                    "description": "A numeric expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "try_element_at",
            "description": "Returns the element of an arrayExpr at index, or NULL if index is out of bound.",
            "syntax": "try_element_at(arrayExpr, index)",
            "arguments": [
                {
                    "name": "arrayExpr",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "index",
                    "description": "An INTEGER expression.",
                    "type": "INTEGER",
                    "optional": false
                },
                {
                    "name": "mapExpr",
                    "description": "A MAP expression.",
                    "type": "MAP",
                    "optional": false
                },
                {
                    "name": "key",
                    "description": "An expression matching the type of the keys of mapExpr",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "try_multiply",
            "description": "Returns multiplier multiplied by multiplicand, or NULL on overflow.",
            "syntax": "try_multiply(multiplier, multiplicand)",
            "arguments": [
                {
                    "name": "multiplier",
                    "description": "A numeric or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                },
                {
                    "name": "multiplicand",
                    "description": "A numeric expression or INTERVAL expression.",
                    "type": "INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_reflect",
            "description": "Call a method with reflection, returning NULL if the method returns an exception.",
            "syntax": "try_reflect(class, method [, arg1] [, ...])",
            "arguments": [
                {
                    "name": "class",
                    "description": "A STRING literal specifying the java class.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "method",
                    "description": "A STRING literal specifying the java method.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "argN",
                    "description": "An expression with a type appropriate for the selected method.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "try_subtract",
            "description": "Returns the subtraction of expr2 from expr1, or NULL on overflow.",
            "syntax": "try_subtract ( expr1 , expr2 )",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "A numeric, DATE, TIMESTAMP, or INTERVAL expression.",
                    "type": "DATE,|TIMESTAMP,|INTERVAL",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "If expr1 is a numeric expr2 must be numeric expression, or an INTERVAL otherwise.",
                    "type": "INTERVAL",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_sum",
            "description": "Returns the sum calculated from values of a group, or NULL if there is an overflow.",
            "syntax": "try_sum ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric or interval.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "try_to_binary",
            "description": "Returns expr cast to BINARY based on fmt, or NULL if the input is not valid.",
            "syntax": "try_to_binary(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression to cast.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING literal describing how to interpret expr.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_to_number",
            "description": "Returns expr cast to DECIMAL using formatting fmt, or NULL if expr does not match the format.",
            "syntax": "try_to_number(expr, fmt)\n\nfmt\n  { ' [ MI | S ] [ L | $ ]\n      [ 0 | 9 | G | , ] [...]\n      [ . | D ]\n      [ 0 | 9 ] [...]\n      [ L | $ ] [ PR | MI | S ] ' }",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a number. expr may include leading or trailing spaces.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "A STRING literal, specifying the expected format of expr.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "try_to_timestamp",
            "description": "Returns expr cast to a timestamp using an optional formatting, or NULL if the cast fails.",
            "syntax": "try_to_timestamp(expr [, fmt] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression representing a timestamp.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "fmt",
                    "description": "An optional format STRING expression.",
                    "type": "STRING",
                    "optional": true
                }
            ]
        },
        {
            "name": "try_zstd_decompress",
            "description": "Returns value decompressed with Zstandard compression. On decompression failure, the function returns NULL",
            "syntax": "try_zstd_decompress ( value )",
            "arguments": [
                {
                    "name": "value",
                    "description": "The binary value compressed with Zstandard that needs to be decompressed.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "typeof",
            "description": "Return a DDL-formatted type string for the data type of the input.",
            "syntax": "typeof(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "Any expression.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "ucase",
            "description": "Returns expr with all characters changed to uppercase. This function is a synonym for upper function.",
            "syntax": "ucase(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "unbase64",
            "description": "Returns a decoded base64 string as binary.",
            "syntax": "unbase64(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression in a base64 format.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "unhex",
            "description": "Converts hexadecimal expr to BINARY.",
            "syntax": "unhex(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression of hexadecimal characters.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "unix_date",
            "description": "Returns the number of days since 1970-01-01.",
            "syntax": "unix_date(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                }
            ]
        },
        {
            "name": "unix_micros",
            "description": "Returns the number of microseconds since 1970-01-01 00:00:00 UTC.",
            "syntax": "unix_micros(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "unix_millis",
            "description": "Returns the number of milliseconds since 1970-01-01 00:00:00 UTC.",
            "syntax": "unix_millis(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "unix_seconds",
            "description": "Returns the number of seconds since 1970-01-01 00:00:00 UTC.",
            "syntax": "unix_seconds(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression.",
                    "type": "TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "unix_timestamp",
            "description": "Returns the UNIX timestamp of current or specified time.",
            "syntax": "unix_timestamp([expr [, fmt] ] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An optional DATE, TIMESTAMP, or a STRING expression in a valid datetime format.",
                    "type": "DATE,|TIMESTAMP,|STRING",
                    "optional": true
                },
                {
                    "name": "fmt",
                    "description": "An optional STRING expression specifying the format if expr is a STRING.",
                    "type": "STRING|STRING.",
                    "optional": true
                }
            ]
        },
        {
            "name": "upper",
            "description": "Returns expr with all characters changed to uppercase. This function is a synonym for ucase function.",
            "syntax": "upper(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A STRING expression.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "url_decode",
            "description": "Translates a string back from application/x-www-form-urlencoded format.",
            "syntax": "url_decode(str)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to decode.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "url_encode",
            "description": "Translates a string into application/x-www-form-urlencoded format.",
            "syntax": "url_encode(str)",
            "arguments": [
                {
                    "name": "str",
                    "description": "A STRING expression to encode.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "user",
            "description": "Returns the user executing the statement. This function is an alias for current_user.",
            "syntax": "user()",
            "arguments": null
        },
        {
            "name": "uuid",
            "description": "Returns an universally unique identifier (UUID) string.",
            "syntax": "uuid()",
            "arguments": null
        },
        {
            "name": "var_pop",
            "description": "Returns the population variance calculated from values of a group.",
            "syntax": "var_pop ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "var_samp",
            "description": "Returns the sample variance calculated from values of a group. This function is a synonym for variance aggregate function.",
            "syntax": "var_samp ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "variance",
            "description": "Returns the sample variance calculated from values of a group. This function is a synonym for var_samp aggregate function.",
            "syntax": "variance ( [ALL | DISTINCT] expr ) [FILTER ( WHERE cond ) ]",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An expression that evaluates to a numeric.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "cond",
                    "description": "An optional boolean expression filtering the rows used for aggregation.",
                    "type": null,
                    "optional": true
                }
            ]
        },
        {
            "name": "vector_search",
            "description": "The vector_search() function allows you to query a Mosaic AI Vector Search index using SQL.",
            "syntax": "vector_search(index, query, num_results)",
            "arguments": [
                {
                    "name": "index",
                    "description": "A STRING constant, the fully qualified name of an existing vector search index in the same workspace for invocations. The definer must have \u201cSelect\u201d permission on the index.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "query",
                    "description": "An STRING expression, the string to search for in the index.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "num_results (optional)",
                    "description": "An integer constant, the max number of records to return. Defaults to 10.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "version",
            "description": "Returns the Apache Spark version.",
            "syntax": "version()",
            "arguments": null
        },
        {
            "name": "weekday",
            "description": "Returns the day of the week of expr. This function is a synonym for extract(DAYOFWEEK_ISO FROM expr) - 1.",
            "syntax": "weekday(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "weekofyear",
            "description": "Returns the week of the year of expr.",
            "syntax": "weekofyear(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE expression.",
                    "type": "DATE",
                    "optional": false
                }
            ]
        },
        {
            "name": "width_bucket",
            "description": "Returns the bucket number for a value in an equi-width histogram.",
            "syntax": "width_bucket(expr, minExpr, maxExpr, numBuckets)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "An numeric or interval expression to be bucketed.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "minExpr",
                    "description": "A numeric or interval expression providing a lower bound for the buckets.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "maxExpr",
                    "description": "A numeric or interval expression providing an upper bound for the buckets.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "numBuckets",
                    "description": "An INTEGER expression greater than 0 specifying the number of buckets.",
                    "type": "INTEGER",
                    "optional": false
                }
            ]
        },
        {
            "name": "window",
            "description": "Creates a hopping based sliding-window over a timestamp expression.",
            "syntax": "window(expr, width [, slide [, start] ] )",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A TIMESTAMP expression specifying the subject of the window.",
                    "type": "TIMESTAMP",
                    "optional": false
                },
                {
                    "name": "width",
                    "description": "A STRING literal representing the width of the window as an INTERVAL DAY TO SECOND literal.",
                    "type": "STRING|INTERVAL",
                    "optional": false
                },
                {
                    "name": "slide",
                    "description": "An optional STRING literal representing an offset from midnight to start, expressed as an INTERVAL HOUR TO SECOND literal.",
                    "type": "STRING|INTERVAL",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "An optional STRING literal representing the start of the next window expressed as an INTERVAL DAY TO SECOND literal.",
                    "type": "STRING|INTERVAL",
                    "optional": true
                }
            ]
        },
        {
            "name": "window_time",
            "description": "Returns the inclusive end time of a time-window produced by the window or session_window functions.",
            "syntax": "window_time(window)",
            "arguments": [
                {
                    "name": "window",
                    "description": "A window column generated by the window function.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath",
            "description": "Returns values within the nodes of xml that match xpath.",
            "syntax": "xpath(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_boolean",
            "description": "Returns true if the xpath expression evaluates to true, or if a matching node in xml is found.",
            "syntax": "xpath_boolean(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_double",
            "description": "Returns a DOUBLE value from an XML document.",
            "syntax": "xpath_double(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_float",
            "description": "Returns a FLOAT value from an XML document.",
            "syntax": "xpath_float(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_int",
            "description": "Returns an INTEGER value from an XML document.",
            "syntax": "xpath_int(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_long",
            "description": "Returns an BIGINT value from an XML document.",
            "syntax": "xpath_long(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_number",
            "description": "Returns a DOUBLE value from an XML document.",
            "syntax": "xpath_number(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_short",
            "description": "Returns an SMALLINT value from an XML document.",
            "syntax": "xpath_short(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xpath_string",
            "description": "Returns the contents of the first XML node that matches the XPath expression.",
            "syntax": "xpath_string(xml, xpath)",
            "arguments": [
                {
                    "name": "xml",
                    "description": "A STRING expression of XML.",
                    "type": "STRING",
                    "optional": false
                },
                {
                    "name": "xpath",
                    "description": "A STRING expression that is a well formed XPath.",
                    "type": "STRING",
                    "optional": false
                }
            ]
        },
        {
            "name": "xxhash64",
            "description": "Returns a 64-bit hash value of the arguments.",
            "syntax": "xxhash64(expr1 [, ...] )",
            "arguments": [
                {
                    "name": "exprN",
                    "description": "An expression of any type.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "year",
            "description": "Returns the year component of expr. This function is a synonym for extract(YEAR FROM expr).",
            "syntax": "year(expr)",
            "arguments": [
                {
                    "name": "expr",
                    "description": "A DATE or TIMESTAMP expression.",
                    "type": "DATE|TIMESTAMP",
                    "optional": false
                }
            ]
        },
        {
            "name": "zip_with",
            "description": "Merges the arrays in expr1 and expr2, element-wise, into a single array using func.",
            "syntax": "zip_with(expr1, expr2, func)",
            "arguments": [
                {
                    "name": "expr1",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "expr2",
                    "description": "An ARRAY expression.",
                    "type": "ARRAY",
                    "optional": false
                },
                {
                    "name": "func",
                    "description": "A lambda function taking two parameters.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "zstd_compress",
            "description": "Returns value compressed with Zstandard compression.",
            "syntax": "zstd_compress ( value [, level [, streaming_mode ] ] )",
            "arguments": [
                {
                    "name": "value",
                    "description": "The binary value to compress.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "level",
                    "description": "Optional integer argument between 1 and 22 that represents the compression level. The default is 3.",
                    "type": null,
                    "optional": false
                },
                {
                    "name": "streaming_mode",
                    "description": "Optional boolean argument that indicates whether to use streaming mode.",
                    "type": null,
                    "optional": false
                }
            ]
        },
        {
            "name": "zstd_decompress",
            "description": "Returns value decompressed with Zstandard compression. On decompression failure, it throws an exception.",
            "syntax": "zstd_decompress ( value )",
            "arguments": [
                {
                    "name": "value",
                    "description": "The binary value compressed with Zstandard that needs to be decompressed.",
                    "type": null,
                    "optional": false
                }
            ]
        }
    ]
}